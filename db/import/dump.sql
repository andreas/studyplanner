/*
SQLyog - Free MySQL GUI v5.16
Host - 5.0.27-community-nt : Database - studyplanner_development
*********************************************************************
Server version : 5.0.27-community-nt
*/

SET NAMES utf8;

SET SQL_MODE='';

USE `studyplanner_development`;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO';

/*Data for the table `course_registrations` */

insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (2,5,11);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (6,136,11);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (7,144,19);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (8,121,19);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (9,77,19);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (10,1,21);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (11,17,22);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (12,29,23);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (13,18,23);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (14,14,22);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (15,17,11);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (16,81,11);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (17,170,19);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (19,120,26);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (20,18,25);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (21,18,24);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (23,91,25);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (26,80,29);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (27,10,28);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (28,12,29);
insert into `course_registrations` (`id`,`course_version_id`,`year_id`) values (31,18,43);

/*Data for the table `course_versions` */

insert into `course_versions` (`id`,`course_id`) values (1,1);
insert into `course_versions` (`id`,`course_id`) values (2,2);
insert into `course_versions` (`id`,`course_id`) values (3,2);
insert into `course_versions` (`id`,`course_id`) values (4,3);
insert into `course_versions` (`id`,`course_id`) values (5,4);
insert into `course_versions` (`id`,`course_id`) values (6,5);
insert into `course_versions` (`id`,`course_id`) values (7,6);
insert into `course_versions` (`id`,`course_id`) values (8,7);
insert into `course_versions` (`id`,`course_id`) values (9,9);
insert into `course_versions` (`id`,`course_id`) values (10,10);
insert into `course_versions` (`id`,`course_id`) values (11,11);
insert into `course_versions` (`id`,`course_id`) values (12,13);
insert into `course_versions` (`id`,`course_id`) values (13,14);
insert into `course_versions` (`id`,`course_id`) values (14,15);
insert into `course_versions` (`id`,`course_id`) values (15,16);
insert into `course_versions` (`id`,`course_id`) values (16,17);
insert into `course_versions` (`id`,`course_id`) values (17,18);
insert into `course_versions` (`id`,`course_id`) values (18,19);
insert into `course_versions` (`id`,`course_id`) values (19,20);
insert into `course_versions` (`id`,`course_id`) values (20,21);
insert into `course_versions` (`id`,`course_id`) values (21,22);
insert into `course_versions` (`id`,`course_id`) values (22,23);
insert into `course_versions` (`id`,`course_id`) values (23,24);
insert into `course_versions` (`id`,`course_id`) values (24,25);
insert into `course_versions` (`id`,`course_id`) values (25,26);
insert into `course_versions` (`id`,`course_id`) values (26,27);
insert into `course_versions` (`id`,`course_id`) values (27,28);
insert into `course_versions` (`id`,`course_id`) values (28,29);
insert into `course_versions` (`id`,`course_id`) values (29,30);
insert into `course_versions` (`id`,`course_id`) values (30,31);
insert into `course_versions` (`id`,`course_id`) values (31,32);
insert into `course_versions` (`id`,`course_id`) values (32,33);
insert into `course_versions` (`id`,`course_id`) values (33,34);
insert into `course_versions` (`id`,`course_id`) values (34,35);
insert into `course_versions` (`id`,`course_id`) values (35,36);
insert into `course_versions` (`id`,`course_id`) values (36,37);
insert into `course_versions` (`id`,`course_id`) values (37,38);
insert into `course_versions` (`id`,`course_id`) values (38,39);
insert into `course_versions` (`id`,`course_id`) values (39,40);
insert into `course_versions` (`id`,`course_id`) values (40,41);
insert into `course_versions` (`id`,`course_id`) values (41,42);
insert into `course_versions` (`id`,`course_id`) values (42,43);
insert into `course_versions` (`id`,`course_id`) values (43,44);
insert into `course_versions` (`id`,`course_id`) values (44,45);
insert into `course_versions` (`id`,`course_id`) values (45,46);
insert into `course_versions` (`id`,`course_id`) values (46,47);
insert into `course_versions` (`id`,`course_id`) values (47,48);
insert into `course_versions` (`id`,`course_id`) values (48,49);
insert into `course_versions` (`id`,`course_id`) values (49,50);
insert into `course_versions` (`id`,`course_id`) values (50,50);
insert into `course_versions` (`id`,`course_id`) values (51,51);
insert into `course_versions` (`id`,`course_id`) values (52,51);
insert into `course_versions` (`id`,`course_id`) values (53,52);
insert into `course_versions` (`id`,`course_id`) values (54,52);
insert into `course_versions` (`id`,`course_id`) values (55,53);
insert into `course_versions` (`id`,`course_id`) values (56,53);
insert into `course_versions` (`id`,`course_id`) values (57,54);
insert into `course_versions` (`id`,`course_id`) values (58,54);
insert into `course_versions` (`id`,`course_id`) values (59,55);
insert into `course_versions` (`id`,`course_id`) values (60,55);
insert into `course_versions` (`id`,`course_id`) values (61,56);
insert into `course_versions` (`id`,`course_id`) values (62,56);
insert into `course_versions` (`id`,`course_id`) values (63,57);
insert into `course_versions` (`id`,`course_id`) values (64,57);
insert into `course_versions` (`id`,`course_id`) values (65,58);
insert into `course_versions` (`id`,`course_id`) values (66,59);
insert into `course_versions` (`id`,`course_id`) values (67,60);
insert into `course_versions` (`id`,`course_id`) values (68,61);
insert into `course_versions` (`id`,`course_id`) values (69,62);
insert into `course_versions` (`id`,`course_id`) values (70,63);
insert into `course_versions` (`id`,`course_id`) values (71,64);
insert into `course_versions` (`id`,`course_id`) values (72,65);
insert into `course_versions` (`id`,`course_id`) values (73,66);
insert into `course_versions` (`id`,`course_id`) values (74,67);
insert into `course_versions` (`id`,`course_id`) values (75,67);
insert into `course_versions` (`id`,`course_id`) values (76,68);
insert into `course_versions` (`id`,`course_id`) values (77,69);
insert into `course_versions` (`id`,`course_id`) values (78,70);
insert into `course_versions` (`id`,`course_id`) values (79,73);
insert into `course_versions` (`id`,`course_id`) values (80,73);
insert into `course_versions` (`id`,`course_id`) values (81,74);
insert into `course_versions` (`id`,`course_id`) values (82,74);
insert into `course_versions` (`id`,`course_id`) values (83,75);
insert into `course_versions` (`id`,`course_id`) values (84,75);
insert into `course_versions` (`id`,`course_id`) values (85,76);
insert into `course_versions` (`id`,`course_id`) values (86,77);
insert into `course_versions` (`id`,`course_id`) values (87,78);
insert into `course_versions` (`id`,`course_id`) values (88,78);
insert into `course_versions` (`id`,`course_id`) values (89,79);
insert into `course_versions` (`id`,`course_id`) values (90,80);
insert into `course_versions` (`id`,`course_id`) values (91,81);
insert into `course_versions` (`id`,`course_id`) values (92,82);
insert into `course_versions` (`id`,`course_id`) values (93,83);
insert into `course_versions` (`id`,`course_id`) values (94,84);
insert into `course_versions` (`id`,`course_id`) values (95,85);
insert into `course_versions` (`id`,`course_id`) values (96,86);
insert into `course_versions` (`id`,`course_id`) values (97,87);
insert into `course_versions` (`id`,`course_id`) values (98,88);
insert into `course_versions` (`id`,`course_id`) values (99,89);
insert into `course_versions` (`id`,`course_id`) values (100,90);
insert into `course_versions` (`id`,`course_id`) values (101,91);
insert into `course_versions` (`id`,`course_id`) values (102,92);
insert into `course_versions` (`id`,`course_id`) values (103,94);
insert into `course_versions` (`id`,`course_id`) values (104,95);
insert into `course_versions` (`id`,`course_id`) values (105,96);
insert into `course_versions` (`id`,`course_id`) values (106,97);
insert into `course_versions` (`id`,`course_id`) values (107,98);
insert into `course_versions` (`id`,`course_id`) values (108,99);
insert into `course_versions` (`id`,`course_id`) values (109,100);
insert into `course_versions` (`id`,`course_id`) values (110,101);
insert into `course_versions` (`id`,`course_id`) values (111,102);
insert into `course_versions` (`id`,`course_id`) values (112,103);
insert into `course_versions` (`id`,`course_id`) values (113,106);
insert into `course_versions` (`id`,`course_id`) values (114,107);
insert into `course_versions` (`id`,`course_id`) values (115,108);
insert into `course_versions` (`id`,`course_id`) values (116,109);
insert into `course_versions` (`id`,`course_id`) values (117,110);
insert into `course_versions` (`id`,`course_id`) values (118,111);
insert into `course_versions` (`id`,`course_id`) values (119,112);
insert into `course_versions` (`id`,`course_id`) values (120,113);
insert into `course_versions` (`id`,`course_id`) values (121,114);
insert into `course_versions` (`id`,`course_id`) values (122,115);
insert into `course_versions` (`id`,`course_id`) values (123,116);
insert into `course_versions` (`id`,`course_id`) values (124,117);
insert into `course_versions` (`id`,`course_id`) values (125,118);
insert into `course_versions` (`id`,`course_id`) values (126,118);
insert into `course_versions` (`id`,`course_id`) values (127,119);
insert into `course_versions` (`id`,`course_id`) values (128,119);
insert into `course_versions` (`id`,`course_id`) values (129,120);
insert into `course_versions` (`id`,`course_id`) values (130,120);
insert into `course_versions` (`id`,`course_id`) values (131,121);
insert into `course_versions` (`id`,`course_id`) values (132,122);
insert into `course_versions` (`id`,`course_id`) values (133,123);
insert into `course_versions` (`id`,`course_id`) values (134,124);
insert into `course_versions` (`id`,`course_id`) values (135,125);
insert into `course_versions` (`id`,`course_id`) values (136,126);
insert into `course_versions` (`id`,`course_id`) values (137,127);
insert into `course_versions` (`id`,`course_id`) values (138,128);
insert into `course_versions` (`id`,`course_id`) values (139,129);
insert into `course_versions` (`id`,`course_id`) values (140,129);
insert into `course_versions` (`id`,`course_id`) values (141,130);
insert into `course_versions` (`id`,`course_id`) values (142,131);
insert into `course_versions` (`id`,`course_id`) values (143,132);
insert into `course_versions` (`id`,`course_id`) values (144,133);
insert into `course_versions` (`id`,`course_id`) values (145,133);
insert into `course_versions` (`id`,`course_id`) values (146,134);
insert into `course_versions` (`id`,`course_id`) values (147,135);
insert into `course_versions` (`id`,`course_id`) values (148,136);
insert into `course_versions` (`id`,`course_id`) values (149,137);
insert into `course_versions` (`id`,`course_id`) values (150,138);
insert into `course_versions` (`id`,`course_id`) values (151,139);
insert into `course_versions` (`id`,`course_id`) values (152,140);
insert into `course_versions` (`id`,`course_id`) values (153,142);
insert into `course_versions` (`id`,`course_id`) values (154,143);
insert into `course_versions` (`id`,`course_id`) values (155,144);
insert into `course_versions` (`id`,`course_id`) values (156,145);
insert into `course_versions` (`id`,`course_id`) values (157,146);
insert into `course_versions` (`id`,`course_id`) values (158,153);
insert into `course_versions` (`id`,`course_id`) values (159,155);
insert into `course_versions` (`id`,`course_id`) values (160,156);
insert into `course_versions` (`id`,`course_id`) values (161,157);
insert into `course_versions` (`id`,`course_id`) values (162,158);
insert into `course_versions` (`id`,`course_id`) values (163,159);
insert into `course_versions` (`id`,`course_id`) values (164,160);
insert into `course_versions` (`id`,`course_id`) values (165,162);
insert into `course_versions` (`id`,`course_id`) values (166,163);
insert into `course_versions` (`id`,`course_id`) values (167,164);
insert into `course_versions` (`id`,`course_id`) values (168,165);
insert into `course_versions` (`id`,`course_id`) values (169,166);
insert into `course_versions` (`id`,`course_id`) values (170,167);
insert into `course_versions` (`id`,`course_id`) values (171,168);
insert into `course_versions` (`id`,`course_id`) values (172,169);
insert into `course_versions` (`id`,`course_id`) values (173,170);
insert into `course_versions` (`id`,`course_id`) values (174,171);

/*Data for the table `courses` */

insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (1,'Discrete Mathematics and Databases','01017',5,'See Danish version.','See Danish version.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (2,'Project work - Bachelor of Mathematics and Technology','01666',10,'To qualify and train students in project work and provide a deeper understanding of one or more subjects within mathematics and mathematical modelling of technical systems.\n','The project content is chosen by the students and the teacher in common. Project subjects are published in previous semesters. The students may suggest projects themselves and find supervisors at Informatics and Mathematical Modelling and Department of Mathematics. The projects will typically include one or more of the disciplines statistics, numerical analysis/scientific computing, operations analysis, signal processing, image analysis, geoinformatics, computer graphics, geometry, coding theory, discrete mathematics\nand dynamical systems/differential equations. Beside the actual project work, there will be given instructions in report writing, group work, short intensive teaching in specific topics and more. The course is finished by oral presentations for all participants. The presentations will take place at the end of the 13-week semester and the actual time and date will be decided by the students and the teachers.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (3,'Discrete Mathematics and Databases for Diplom IT','01917',5,'See Danish version.','See Danish version.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (4,'Introductory Programming','02101',5,'To give the participants knowledge about basic concepts for imperative og object-oriented programming languages. To give the participants skills in solving and documenting smaller programming tasks.','Going through a common imperative and object-oriented programming language\n(p.t. Java) and identifying basic language concepts. Methods for construction, testing and documentation of smaller programs. ');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (5,'Introductory Programming','02102',5,'To give the participants knowledge about basic concepts for imperative og object-oriented programming languages. To give the participants skills in solving and documenting smaller programming tasks.','Going through a common imperative and object-oriented programming language\n(p.t. Java) and identifying basic language concepts. Methods for construction, testing and documentation of smaller programs. \nRelation to other programming languages (e.g. C).');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (6,'Algorithms and Data Structures I','02105',5,'See Danish description (course is taught in Danish).','See Danish description (course is taught in Danish).');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (7,'Algorithms and Data Structures II','02110',5,'To provide the student with an understanding of the techniques involved in the construction and analysis of more advanced algorithms. To strengthen the student\'s ability to construct algorithms. ','Basic graph algorithms (balanced search trees, strongly connected components, minimal spanning trees, shortest paths). Algorithms for string matching. Techniques for the design and analysis of algorithms (dynamic programming, greedy algorithms). Algorithms in Comutational Geometry. Randomized algorithms.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (9,'Informatics Projects','02120',7.5,'That participants complete a program development project, where the result is a program with associated documentation.','The course is centered around a\na software development project for a problem originating from a topic of â€œinformatikfagpakkenâ€. Normally,  one can choose a project among a list of projects offered. The problem formulations will often be rather open. Consequently, the students must independently study the topic and limit the project so that a well-balanced product, consisting of program and associated documentation, is available by the end of the course.\n\nReport writing and documentation of software.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (10,'Engineering practice','02121',10,'To understand the content and methods involved in engineering practice. Based on a role playing game, the students will be trained in cooperation, understanding of economic issues, and resource limitations through concept and product development. I the 3-weeks period, topics from the role playing game can be used for further analysis and exploration.','In the fall, students will develop a product through a role playing game. The product could be a distributed system of sensors. All groups are going to develop the same product.\n\nBesides technical decisions, the development of the system will cover considerations of component prices, labor and outsourcing. The groups are competing against each other on price, time-to-market and product quality. External circumstances such as delayed delivery of components, political decisions, etc. will influence the game.\n\nIn the 3-weeks period, students will use the knowledge gained through the full first semester to undertake a programming project, where elements of the role playing game can be further studied. Students will be trained in mathematical modelling, software development and documentation. A key aspect will be documentation of the developed software.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (11,'Software Technology Project','02122',10,'.','.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (13,'Embedded systems','02131',10,'The course covers the development of systems where parts can be implemented in either hardware or software. The course emphasize a technical and theoretical correspondence between development of hardware and software, and introduces the fundamental  techniques of codesign.\n\nPassing the course will enable participants to describe the most essential components in a computer as well as the relation between the components.  They will be able to describe and use selected programs to assist software development.  They will understand and use the fieldâ€™s terminology in technical reports. They will be able to design small digital systems and make reasonable predictions about their properties, especially with respect to speed, size, and energy consumption. They will be able to develop and document both programs and routine libraries bridging the gap between machine specific details and programs written in traditional programming languages.','The structure of general processors, including the datapath, the control unit and\nthe memory elements. Design and construction of specialised processors, including\ncombinatorial and sequential logic, state machines, and composition of complex\ncomponents by use of busses.\n\nProgramming at a machine specific level; tools for program\ndevelopment; compilation and interpretation; test and verification; computers as layered systems; a user\'s and a program\'s interface to an operating system;\nelementary multiprogramming.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (14,'Lab. Course in Computer Architecture','02137',5,'To give the participants practical experience in design and implementation of digital systems using a simulation and synthesis based design flow.','Implementation and test of the design carried out in course 02151. Internal organization of an FPGA chip. VHDL coding for synthesis. Synthesis from VHDL to an FPGA.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (15,'Computer Science Modelling','02141',10,'After having followed the course the students should be able to understand and apply the central models and formalisms introduced in the course and to use and construct tools related to these formalisms.','The main part of the course covers four main topics: \n(1) Regular languages and their relation to (deterministic and nondeterministic) finite automata, practical applications (searching in texts, lexical analysis, security automata, etc.) and some key theoretical properties (including closure and decidability properties).\n(2) Context free languages and their applications (in parsing and XML documents) together with a brief introduction to pushdown automata and their relationship to context free languages.\n(3) Transition systems and their applications in operational semantics for a variety of language constructs including their use in specifying reference monitors and code generation as well as formal techniques for comparing specifications.\n(4) Inference systems and their applications in specifying simple type systems and simple security properties.\n\nThe course includes hands-on experience with various tools and the students are required to solve theoretical as well as practical programming exercises.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (16,'Semantics and Inference Systems','02142',5,'After having followed the course the students should be able to understand and apply the central models and formalisms introduced in the course and to use and construct tools related to these formalisms.','Transition systems and their applications in operational semantics for a variety of language constructs including their use in specifying reference monitors and code generation as well as formal techniques for comparing specifications.\n\nInference systems and their applications in specifying simple type systems and simple security properties.\n\nThe course includes hands-on experience with various tools and the students are required to solve theoretical as well as practical programming exercises.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (17,'Computer Architecture and Engineering ','02151',10,'To enable participants to design large scale digital systems and to provide the participants with in depth knowledge on computer organization.','Part A - Design of digital systems. Data-path and Control. Pipelining. From algorithm to circuit. Performance measures (throughput and latency). Introduction to the hardware description language VHDL and a structured design flow (specification, stepwise refinement, simulation and synthesis).\n\nPart B - Computer organization: Introduction to computer organization and instruction sets. Number representation and arithmetic for integer and floating-point numbers. Organization of the processor in a modern RISC-computer (control unit, data path, pipelining). The relationship between processor organization and instruction set. Buses and I/O units and between processor organization and operating systems. Memory hierarchies, cache memories and virtual memory.\n\n\nPart C - Design project: In parallel with the lectures participants design and simulate a simple processor using VHDL and related CAD-tools. The purpose of this is twofold: to elaborate on the material covered in the lectures, and to introduce the use of VHDL and related CAD tools for the design of digital circuits and systems.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (18,'Concurrent Systems','02152',10,'To provide the participants with a conceptual and practical basis for\nconstruction of systems comprising multiple interacting concurrent\ncomponents executed on one or more computers.\n\n','Concurrent programming: Processes, synchronization, communication. Process\nmodels, atomic actions. \nSafety and liveness properties, verification\ntechniques and tools. Critical regions. Semaphores, monitors,\nsynchronous and asynchronous message passing, call mechanisms, \ndistributed objects, tupple spaces. Concurrent data structures.\n\nNetwork programming: Network types, protocol concepts, OSI model, TCP/IP,\nsockets, middleware (e.g. RMI, CORBA, web-services).\n\nSystem design:  Common communication patterns and algorithms. \nClient-server paradigm. Transactions and concurrency control.\nService oriented architectures.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (19,'Declarative Modelling ','02153',10,'The aim of the course is to give the students an introduction to some\nof the basic declarative formalisms from formal computer science that\ncan be used for describing, analysing and evaluating aspects of IT-systems.\nIt will cover theoretical insight as well as practical skills in relevant high-level programming languages.','One area of study covers inference systems and formal logical systems.\nBuilding on predicate logic as introduced in \"Mathematics and Databases\"\nwe will introduce general logical systems and as a continuation of \"Datalogisk\nModellering\" we will clarify the expressive strength of inference systems.\nIt will be possible to cover examples of modal and temporal logics to describe\ndynamic properties of systems. There will be particular emphasis on those\nframgments that can be implemnted automatically, in particular Horn clauses,\nand students will obtain practical experience with relevant high-level\nlanguages like Prolog.\n\nThe other area of study will involve rapid prototyping using functional\nprogramming and the corresponding analysis by means of type- and effect-\nsystems. Based on the students\' knowledge of object-oriented programming\nthe focus will be on the ability to vary the level of abstraction (as was\nalready demonstrated in \"Matematik og Databaser\") and the first examples of\na more declarative description of automata in \"Datalogisk Modellering\").\nIt will be possible to cover type- and effect-systems where entities have\nphysical dimensions (motivated in general engineering applications) and where\nthe communicatin structure can be modelled. The students will obtain practical\nexperience in relevant high-level languages like OCAML or F#.\n\nThe student should understand the use of advanced high-level languages as\nrapid prototyping tools (rather than general purpose programming languages\nthat compete with Java or C#).\n\n\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (20,'Formal Logical Systems','02156',5,'The aim of the course is to give the students an introduction to some of the basic declarative formalisms from formal computer science that can be used for describing, analysing and evaluating aspects of IT-systems.\nIt will cover theoretical insight as well as practical skills in relevant high-level programming languages.','The course covers inference systems and formal logical systems. Building on predicate logic as introduced in \"Mathematics and Databases\" we will introduce general logical systems and as a continuation of \"Computer Science Modeling\" we will clarify the expressive strength of inference systems.\n\nIt will be possible to cover examples of modal and temporal logics to describe dynamic properties of systems. There will be particular emphasis on those framgments that can be implemnted automatically, in particular Horn clauses, and students will obtain practical experience with relevant high-level languages like Prolog.\n\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (21,'Software Engineering 1','02161',5,'To give students an introduction to software development. To give students skills concerning the solution of a small software development problem, spanning from the problem statement to the implementation and use of the concrete software product.','Softwaredevelopment, comprising the typical phases in the development and different roles in development teams.\n\nSoftware documentation, comprising analysis of problem statement, requirements specification, software design, test and implementation. For this purpose, parts of ULM is introduced, e.g. use cases, class diagrams and sequence diagrams.\n\nA development environment will be used.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (22,'Development of Software Products','02165',5,'To introduce product development from an industrial perspective, covering processes, phases, roles and aspects of the development of real\nproducts. To give students experience in product development from the following point of views: Product Management, Program Management, Development and Test. This experience is given on the basis of a simple (fictive) case study.\n','Development processes, where focus is on agile development processes, team models and tools (e.g. VS.net and Visual Studio Team System), in order to ensure the timely delivery of large, complex products with a long development time.\n\nProduct planning spanning from requirements capture, vision/scope and pricing to rollout at the customers.\nProgram management, including project structure and plan, usability design and test, project follow-up (including how to handle change of plans), and the stabilization phase.\n\nDevelopment, including choice of technology, prototyping, architecture, source control and build, coding (including engineering excellence, security and privacy), unit test, build verifications test and stabilisering. \n\nTesting, including strategies and exit criteria, tools, planning, infra structure, test coding, konfiguations test, system test and performance test.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (23,'Digital design and computer organization','02200',10,'No description available.','The Course is cancelled. New course no 02151 Computer Architecture and Engineering');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (24,'Design of Asynchronous Circuits','02204',5,'The aim of the course is to introduce the participants to asynchronous circuit design. The course will motivate the use of asynchronous circuits and teach the basic theory and concepts, such that the participants will be able to: (1) design control and data-processing circuits, and (2) read and understand the literature on asynchronous circuit design.','Motivation for using asynchronous circuits. Basic concepts, communication protocols, and circuit implementation styles. Simple circuit examples. Performance analysis: qualitatively and quantitatively (latency, wavelength, and cycle time). Fundamental theoretical concepts: classification (self-timed, speed-independent, delay-insensitive), hazards, isochronic forks and logic thresholds, arbitration. Control circuits: synthesis of speed-independent control circuits from signal transition graph specifications. Data-path circuits: design of efficient data-path circuits with completion detection/indication. Four-phase bundled-data circuits: Simple, semi-decoupled, and fully-decoupled latch controllers. Normally opaque and normally transparent latch controllers. Early, broad and late protocols. Design strategies/methods: static data-flow structures and compilation from asynchronous HDL\'s. Case studies: some recent (commercial) asynchronous IC\'s. Current research trends.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (25,'Advanced Digital Design Techniques','02207',5,'To provide the students with complete understanding of the design process\nfor digital systems. To enable students to a comprehensive design space\nexploration based on models evaluation. To provide techniques and\nstrategies aiming at both low power and high speed design.\nTo understand design tradeoffs and different design approaches for\ndifferent technologies: ASICs, FPGAs, and SoCs.\n','Overview (review) of digital systems: combinational and sequential logic,\ntiming,  power dissipation.\nDesign flow: levels of abstraction, design flow for ASICs,\ndesign flow for FPGAs.\nDesign tasks: simulation, synthesys, place&route.\nDesign for high-speed: parallelization, pipelining, retiming, clock scheduling.\nDesign for low-power: high-level, RT-level and gate-level techniques.\nDesign of datapaths: addition, multiplication, division.\nReconfigurable architectures: processing elements and interconnection network.\nA case study.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (26,'Test of integrated circuits','02208',7.5,'Introduction to the testing problem for integrated circuits, enabling the participants to design integrated circuits of high test quality.','The course treats the fundamental theory for test of electronic circuits with specific emphasis on the design of highly testable digital integrated circuits.\nThe course covers the topics of:\n- physical failure mechanisms and logic fault models,\n- testability analysis (controllability and observability),\n- algorithms for test pattern generation,\n- test evaluation (fault coverage) and fault sampling,\n- design for test and test of special design structures,\n- testability at board level,\n- test planning in the design phase,\n- commercial test systems, test and measurement equipment.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (27,'Design of Integrated Circuits','02216',5,'To enable the students to\n1) design basic cells as well as complex digital ICs using modern design tools,\n2) understand the basis of MOS technology, including the MOS field effect transistor, and to choose a proper production technology with due consideration of technical and economical terms,\n3) design and lay out fundamental digital structures in MOS technology with such a degree of proficiency that the circuits exploit the potential of the technology with respect to area, speed, and power,\n4) analyse and select computational and control as well as interconnect structures best suited for the design problem.','Overview on MOS technology (masks, design rules and electrical parameters)\nand basic components of MOS circuits (MOSFET, resistors, capacitors, switches).\nScaling of MOS technology. MOS transistor circuits and their characterization (DC characteristics, noise margin).\nConstruction and layout of digital MOS circuits (combinatorial and sequential\ngates, clocking systems), layout strategies and standard structures (RAM, ROM, PLA). Timing analysis and optimization of MOS circuits, including aspects of interconnect.\nConstruction of high-speed / low-power circuits.\nRealisation of computational structures.\nExercises: 1) Layout of digital component. 2) Transistor level simulation. 3) Characterization of components/cells.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (28,'Design of Arithmetic Processors','02217',5,'Arithmetic processors are today present in Graphics Processing Units (GPUs) and CPUs of high-end computers. They implement complex arithmetic operations necessary to render 3D graphics and to execute computation intensive applications.\nIn this course, students will learn the background in computer arithmetic, such as number representation, rounding modes and pecision, the  basics of implementing numerical processors and the solutions adopted in the state-of-the-art arithmetic processors.','Introduction to computer arithmetic. Basic operations: addition, multiplication, division, square-root. Floating-point arithmetic and FP-units. Processors for graphics applications. Decimal processors for financial applications. Alternative number systems.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (29,'Principles of distributed systems','02221',5,'To illustrate the types of problems which arise and methods used in the design and analysis of systems of interconnected computers.','Classification of distributed systems: loosely- and tightly coupled systems. System architectures: unreliable networks and programs as implementations of perfect abstract processes which communicate via lossless channels. Services and protocols. Principles of protocol design. Standardised services and protocols. Layered architectures.\n\nSpecification of distributed activities. Proofs of system properties. Distributed algorithms and their properties. Implementation of distributed systems. Security. ');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (30,'Distributed systems','02222',10,'To illustrate the types of problems which arise and methods used in the design and analysis of systems of interconnected computers.','Classification of distributed systems: loosely- and tightly coupled systems. System architectures: unreliable networks and programs as implementations of perfect abstract processes which communicate via lossless channels. Services and protocols. Principles of protocol design. Standardised services and protocols. Layered architecture.\n\nSpecification of distributed activities. Proofs of system properties. Distributed algorithms and their properties. Implementation of distributed systems. Security. Paradigms for distributed systems: client/server, agents, P2P. Clusters and GRID computing.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (31,'Real-Time Systems','02224',5,'To make the participants able to construct safe real-time computer-based systems using formal modelling and verification techniques.','High-level modelling of timed behaviour. Specification and verification of real-time properties.  Process scheduling. Modelling and verification tools. Implementation techniques.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (32,'Design and synthesis of embedded systems','02227',5,'To provide the participants with a conceptual understanding of the methods behind modern design of embedded systems; including System-on-Chip. To understand the interplay between hardware and software in embedded systems, and to understand and use synthesis methods and algorithms for designing embedded systems; including Electronic Design Automation, EDA.','The course covers basic methods, models and algorithms for designing embedded systems. Focus is placed on identification of design problems, their mathematical formulation and solution using computers.\n\nThe exact topics and focus will vary from year to year. In 2007 the focus is on wireless sensor networks. The new computing paradigm enabled by the ad hoc wireless sensor networks will be a key in making computation more proactive. The silicon-based single-chip wireless sensors and the ad hoc sensor networks represent exciting new technologies with broad societal impacts and a wide range of new commercial opportunities. \n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (33,'Safety-Critical Embedded Systems','02229',5,'The course covers the design and development of safety-critical embedded systems, for which timing constraints are of utmost importance and where fault-occurrence can lead to catastrophic consequences.\n\nPassing the course will enable participants to: understand and use the concepts and terminology in the field; understand and evaluate the safety and timeliness attributes of embedded systems; use and develop tools for the design, analysis and implementation of safety-critical embedded systems; design and implement small hard real-time and fault-tolerant embedded systems.\n','Embedded systems in critical applications: embedded systems, safety requirements\nDistributed embedded real-time systems: real-time systems, temporal requirements\nReal-time operating systems and scheduling: task management, inter-process communication, scheduling\nSchedulability analysis: resource sharing and communication, determining worst-case response time\nHazard and risk analysis: risk vs. hazard, fault-tree analysis, risk classification\nSafety-critical hardware and software: microprocessor design faults, electromagnetic compatibility, software design and implementation\nSafety-critical communication: requirements, media-access protocols\nFault-detection: types of faults, fault detection techniques\nFault-tolerance techniques: hardware fault tolerance, software fault tolerance\nDeveloping safety-critical systems: the safety life-cycle, verification, validation and testing\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (34,'Applied Cryptography','02232',5,'To provide an introduction to applications of cryptography in distributed systems and applications.','The course covers a number of advanced cryptographic algorithms and protocols and shows how these can be used to improve security in distributed systems and applications. Typical topics covered by the course  are: authentication protocols, electronic payment systems, online elections and privacy enhancing technologies.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (35,'Network Security','02233',5,'To provide a working knowledge of network security in theory and practice.','Basic network security in LAN and WAN environments; Protocols for client-server communication in high risk environments; Secure communications to ensure confidentiality, authenticity and integrity.\nSecurity architecture: firewalls and DMZs, VLAN and VPN.  Proxies, intrusion detection and protection systems (IDS/IPS), audit and analysis of attacks.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (36,'Biometric Systems','02238',5,'The students should develop:\n- an understanding of the principles used in biometrics algorithms and  systems.\n- a knowledge of the most important biometric approaches.\n- the capability to select a suitable algorithm / system for a given application context (e.g. physical access control)\n- a good understanding of the complex relationships between biometric systems and environmental conditions (e.g. illumination, pose variations etc.) and their impact on biometric performance.\n- the capability to assess the security properties of a biometric system.\n- an understanding of data privacy principles and the impact on the design and configuration of biometric systems.\n','Authentication of individuals based on the biological and behavioural characteristics such as the face, the iris or fingerprints is a promising research domain. Biometric algorithms allow the recognition of individuals in physical or logical access control systems and thus provide an efficient and convenient alternative to knowledge based or token based systems.\n\nThe lecture covers the most important mechanisms in today\'s commercial biometric systems: Face recognition, iris recognition and fingerprint recognition. The course covers sensors, biometric image processing, feature extraction and classification methods. Furthermore evaluation schemes for biometric systems will be discussed such as biometric performance testing and security testing. The lecture will also map data privacy principles to the biometric system design process.\n\nThe complementary seminar extends the content of the lecture with topics on current application areas. Theses topics are researched and analysed. Specific Focus is given on applications that are specific for the European data privacy culture .\nFurthermore the seminar will discuss interoperability issues and international standardization in the field.\nThe seminar will address selected topics from current biometric research regarding 3D face recognition, biometric sample quality, multimodal biometrics and biometric template protection (e.g. www.3dface.org)\n\n\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (37,'Program analysis','02242',7.5,'After having followed the course the students should be able to understand and apply the program analysis formalisms introduced and to construct and apply the analysis tools and techniques facilitated by the formalisms.','The course covers three main topics: (1) Data flow analysis: This part covers the classical intra-procedural analyses and their formulation as monotone frameworks as well as their applications in program transformations. (2) Flow logic: This part introduces the flow logic approach to specifying intra- as well as inter-procedural analyses and the associated techniques for obtaining implementations in constraint-based/logical form. (3) Algorithms: This part covers work-list algorithms exploiting the graphical structures of the constraint systems associated with the analysis problems.\n\nThe students are required to solve theoretical exercises as well as programming exercises.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (38,'Access Control','02243',5,'Explain current developments in access control, and the reasons that drive these developments; appreciate some of the theoretical foundations for access control.','1. Introduction to access control, foundations & terminology\n2. Access control in Windows, with a focus on advanced features like inheritance and delegation of access rights.\n3. Access control and PKIs: emphasis on SPKI, leading on to the delegation model from the Amanda project\n4. Trust Management systems:  brief discussion of the main aspects of KeyNote and Policymaker\n5. Policy languages: Binder, Cassandra (maybe some remarks on Datalog)\n6. Execution monitors (building on Fred Schneiderâ€™s paper)\n7. Code-based access control in Java and .NET\n8. Bell-LaPadula model and');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (39,'Language Based Security','02244',7.5,'After having followed the course the students should be able to understand and apply the security formalisms introduced and to apply the related tools and techniques with the aim of solving related problems.\n','The course covers three main topics:\n(1) Protocol Analysis: This part covers techniques and tools that can be used to analyse security protocols in order to either detect confidentiality and authentication errors or to guarantee that no such errors can occur.\n\n(2) Proof Carrying Code: This part covers techniques that will ensure that mobile code is distributed together with a proof that guarantees that it does not behave in a harmful way.\n\n(3) Information Flow: This part covers techniques to describe policies of who-should-known-what and goes into techniques for ensuring that these policies are upheld including the decentralised label model.\n\nThe students are required to solve exercises relating to tools and techniques for the above.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (40,'Computationally Hard Problems','02248',5,'The aim is to enable the students to identify  a problem as being hard and to introduce the students to the powerful concept of randomization.\n','There are many important problems in Computer Sciences and other areas for which optimal solutions can be found but the time to do so is so long that it is  not practical. Examples of such problems are optimal assignment of tasks to processors, finding an optimal tour for the local postman, optimal packing of a suitcase, optimizing the payload for a space mission or selecting a profitable stock portfolio. \n\nIn the course we will first specify what we mean by a ``computationally hard\'\' problem. Then some examples of such that problems are presented and methods are described to identify a problem as being hard. In order to become accessible to an analysis real world problems have to be converted into abstract mathematical models which capture the essence of the original problem.\n\nWe shall then look at problems where randomization helps in solving them. This means that there are fast algorithms for solving the problem that use ``coin flips\'\', i.e. a random number generator. Hence repeatedly running such an algorithm on the same input might lead to different solutions. We shall consider problems where a ``good\'\' solution will be found with high probability by randomized algorithms. \n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (41,'Usability engineering','02261',5,'To give the students a practical understanding of the basic problems and concepts met in the area of Human-Computer Interaction, to present basic rules for usable design, to present techniques such as think-aloud tests, inspection, interview, observation and card sorting, and knowledge of when these techniques are most appropriate for use, and to enable the students to carry out a project in which user needs are taken into account in a reasonable way.','What is user-friendliness? Operational definitions of user-friendliness. Basic design rules, illustrated by examples, in particular from the Internet. Choice of design strategies, which can ensure a user-friendly design. Techniques for the development of a usable design. Practical exercise: Carry out a think-aloud test and an interview, and report the results.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (42,'Formal Aspects of Software Engineering','02263',5,'The aim of the course is to introduce participants to mathematically based methods for developing software systems, and in particular to give them skills in using and writing formal specifications using various abstraction and modelling techniques.','Formal specification, starting with one or more typical examples of specification languages. Introduction to various specification techniques: model-oriented versus algebraic; applicative versus imperative.  Stepwise development and verification (formal proof). Implementation relations. Solution of exercises in specification using computer based specification tools. ');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (43,'Software Development of Web Services','02267',5,'The goal of this course is to understand the basic concepts of Web service technology and the problems and solutions in service oriented architectures.\n','Basic technologies for Web Services like XML, SOAP, WSDL, etc.\n\nProblems and solutions in service oriented architectures, including orchestration and choreography of Web services, long living transactions, security, etc.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (44,'Pattern-Driven Design of Business Applications','02269',5,'The aim is to explain the students domain-driven design of\nknowledge-intensive applications, and teach them to think at the level of\nabstraction determined by the domain. This level is higher than the level of\nabstraction of user requirements, but lower than the level of abstraction of\nmost programming languages. ','There are several patterns present in almost all business software\napplications, such as REA (Resources, Events, Agents), Commitment, Contract,\nPolicy, Account and Claim. Knowing these patterns radically enhances\nsoftware engineersâ€™ potential to design business applications without\nomissions, and ensures that the applications can adapt to changing\nrequirements without the need to change the overall architecture. The\npattern-based approach allows for both more flexible and more solid software\narchitectures of business applications and hence better software quality. \n\nThis course explains the concept of a software pattern, how to understand\nalready documented patterns, and how to discover new patterns. Weâ€™ll\ninvestigate about 20 business patterns in detail, and learn how to apply\nthem in a design of business applications. ');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (45,'Data logic','02281',5,'Introducing to formal logic as applied in computing science andartificial intelligence. In particular introducing to formulation of logical systems models and to logic programmering.','Predicate logic and other logical languages. Logical concepts such as logical consequence and formal proof.  Logical formulations and reasoning with examples from daily life, from relational databases and from simple technical systems. Logic programmering languages.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (46,'Knowledge-based Systems','02284',5,'To gain insight in the logical theories which form the basis forknowledge representation inknowledge based systems.','Combining logical and object-oriented knowledge representations. Object-oriented data bases. Classification with algebraic lattices. Property inheritance. Relation-algebraic logic for knowledge representation. Prerequisites: acquaintance with predicate logic, logic programming, and relational data bases. Ontologies.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (47,'System integration','02291',5,'To provide the participants with a theoretical foundation necessary to understand, model, analyse and design complex heterogeneous systems assembled from different components. The aim is to cover different levels of abstraction as well as the different layers of a system.\n','The main focus of this course are object-oriented modelling techniques based on the Unified Modeling Language (UML). A second focus will be on describing and analysing properties of these models.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (48,' Synthesis','02292',10,'To complete a project where a large group of students (10-15 students) work in a team to solve a large, complex and open problem, in which they have to combine individual skills and competences obtained through their choice of of technological specialization and elective courses.\n','The exact project and theme will change from year to year. Details will follow later.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (49,'Analysis techniques','02299',7.5,'The students will obtain an understanding of one or more of the advanced techniques for program analysis - thereby complementing their previous knowledge of analysis techniques and giving them the background needed for judging which approach is adequate in a given setting.  ','The course consists of two parts;  The first part covers advanced approaches to program analysis; possibilities include abstract interpretation and type and effect systems. The second part covers recent research papers within an internationally hot research area.\n\nThe students are required to solve a number of exercises in the first part of the course and to present papers in the second part of the course.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (50,'Digital systems','02311',5,'To enable participants to analyze, design, simulate, implement, test and document:\n- Combinational Circuits\n- Synchronous Sequential Circuits','- Binary numbers, Binary arithmetic, Gates and Boolean algebra, Logic functions and Truth tables.\n- Combinational components: Multiplexer, Decoder, Encoder.\n- Memory components: Flip-flop and Latch.\n- Synchronous finite state machines, State diagrams.\n- Timing, Glitches, Setup time and hold time,  Metastability.\n- Buses, Tree-state drivers.\n- Simple RC-models of propagation delay in gates and wires.\n- Application of tools for description and synthesis of digital systems (at present VHDL).\n- Documentation and report writing.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (51,'Introductory Programming','02312',10,'.','.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (52,'Elementary Programming for Diplom-E','02318',5,'See danish text','See danish text');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (53,'Advanced Programming for Diplom-E','02319',5,'To enable the student to program in C++. To start with the most useful concepts rather than the most primitives ones. To describe real problems and solutions. To cover tha language and the standard library.','C++ language constructs. After a short introduction covering functiondriven, datadriven and object oriented programming will the take off be programs that use standard-library abstractions, later we will concentrate on defininig own abstractions. Basic data types and calculations, choices and decisions, loops, arrays and strings, pointer and reference, programming with functions and templates, program files and the pre-processor, struct and classes, class operations, operator overloading, inheritance, virtual functions and polymorphism, program errors and exception handling, class templates, input and output operations, and the standard template library (STL) will be covered on the run.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (54,'Hardware/software Programming','02321',10,'To enable participants to plan, implement, program, debug and test systems combining microcontrollers and programmable logic.','Organization of general processors including data path, controller and memory.\nDesign and construction of specialized processors including combinational logic, sequential logic, state machines and connection of complex components by buses.\nProgramming with a machine oriented language (at present C), program development tools, computers considered as multilayer systems, interface between user program and operating system, simple multiprogramming.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (55,'Signal Analysis','02322',5,'To provide the participants knowledge of\n1. signals: Single and multi channel, deterministic and stochastic,\n2. basis signal processing methods,\n3. Matlab as a tool for development of signal processing algorithms.\n','Signals and systems; continuous-time and discrete-time signals ; signal sampling and reconstruction; frequency analysis of signals; the discrete Fourier transform and FFT; stochastic signals; signal detection.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (56,'Probability and Statistics','02323',5,'To give the participants a basic knowledge of a number of probability models which are important for engineers and which are usefull in probability calculations. Further important statistical priciples and methods for analyzing data and for estimation, testing and verification of probability models. \nFuthermore, an overall goal is:\n- to understand and relate to the applied method of research,\n- to make the students able to deal with results from newspapers and television, and\n- to make them able to read and use results from research and development.   ','Simple methods for graphical and tabular assessments of empirical data.  Fundamental probability calculations including the concept of probability, random variables, probability distributions, simultaneous and conditional distributions. Bayes formula. Models for certain types of random variables such as e.g. Poisson-, binomial-, exponential- and normal distributions. Test and estimation of parameters and construction of confidence intervals in frequently occuring situations (e.g. means, variances, proportions). Regression analysis with one independent variable and introduction to the analysis of variance and to the analysis of contingency tables. ');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (57,'Structured Software Development','02329',5,'No description available.','No description available.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (58,'Distributed Embedded Systems','02330',10,'To give students the possibility to:\n- design, make operable, and debug distributed embedded systems for industrial or instrumental purposes.\n- connect an embedded processor with the sourrounding physical world, both in and out.\n- to exercise systematic working methods.','- Instrumentation: Conversion of physical entities to computer-based ones and the opposite.\n- Different CPU architectures and their influence on hard real time systems.\n- Networks specialised on control purposes, like the CAN bus. Protocols for that.\n- Principles for construction of distributed, real time systems.\n- Synchronisation between remote processors, event- and time-triggered \n- Hierarchical systems.\n- Robustness and reliability.\n- Methods for development, test and operation of dependable distributed systems.\n\nA distributed, embedded system based on a network of processors, will be used for practical exercises.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (59,'Parallel and Real-time systems','02333',10,'To give the student the possibility to construct and use an operating system including and emphasising on systems for parallel- and real time use in embedded systems','- Modelling\n- Multi programming, the concepts of the time processes and parallelity.\n- Ressources, critical regions, semaphores, monitors and rendezvous.\n- Synchronisation,: time, event and messages.\n- Priority, dead lock and starvation.\n- Implementation and use of kernels for parallel and real time programming.\n- Operating systems: Processes, treads, set up and deletion, communication mechanisms, drivers, file system, ressource administration and security.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (60,'Datacommunications and WEB Technology','02335',10,'The Purpose of the Course is to:\n\n- Understand the structure of the Internet and its protocols and make use of it\n- Develop, set up and maintain web sites on the Internet\n- Communicate with Data Bases via the Internet\n- Understand security aspect in Intra- and Internet.','- The structure of the Internet and its protocol stack.\n- International Standards for Interfaces between Terminals and networks.\n- Standards for Local Area Networks (LANs), advantages and disadvantages of different types of networks.\n- Detection and correction of transmission errors.\n- Network topologies and the solution of routing problems in already existing networks.\n- Introduction to JAVA Socket Programming.\n- Fundamentals of HTML, set up of a Home Page including text, graphics and links, tables, forms and frames.\n- Style Sheets CSS.\n- Browser Object Model, scripts.\n- Communication with Data Bases via the web.\n- Setting up web servers and presentation of different tools.\n- XML');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (61,'Basic Study of Mainframe - z/OS','02337',5,'The purpose with the course is to make the student able to understand Mainframe Architecture. It is important that the student gets a thorough knowledge of how the operational system z/OS works and also mainframe architecture in general plus the applications that runs on the mainframe. In the business community there is a large demand for staff qualified to mainframe and the course also includes guest lecturers from the business community.','The course will go through the operative system z/OS and introduce the student to the basic elements in z/OS â€“ including how you work with TSO (Time Sharing Option/Extensions), SDSF (System Display and Search Facility) and Unix Shells. Moreover, batch processing and how you work with files/dataset at mainframe will be introduced.\n\nThere will be a going through of the â€œtraditionalâ€ programmes at mainframe such as PL/1, Cobol and REXX, but also a going through of c/java programmes and large applications such as data base systems (DB2) and transaction systems (CICS). Furthermore, the students get the possibility to se mail systems and web servers.\n\nThe course consists of exercises where the students get the possibility to work at a z/OS system. After the course each individual student will be able to log on a z/OS system and carry out a few problems.\n\nDuring the course guest lecturers from the business community will tell about their experiences with the mainframe and about the career possibilities within the mainframe field.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (62,'Computer Architecture','02340',10,'To enable participants to design large scale digital systems and to provide the participants with in depth knowledge on computer organization.','Part A - Design of digital systems:\nData-path and control. Pipelining. From algorithm to circuit. Performance measures (throughput and latency). Introduction to a hardware description language (VHDL or System C) and a structured design flow (specification, stepwise refinement, simulation and synthesis).\n\nPart B - Computer organization:\nIntroduction to computer organization and instruction sets. Number representation and arithmetic for integer and floating-point numbers. Organization of the processor in a modern RISC-computer (control unit, data path, pipelining). The relationship between processor organization and instruction set.  Buses and I/O units. \nMemory hierarchies, cache memories and virtual memory. \n\nPart C - Design project:\nIn parallel with the lectures participants design, simulate, synthesize and test a simple processor. The purpose of this is twofold: to elaborate on the material covered in the lectures, and to introduce the use of a hardware description language (VHDL or System C) and related CAD tools for the design of digital circuits and systems.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (63,'Object-oriented Analysis and Design and Databases','02344',10,'The aim of the course is to make the student able to use object oriented techniques in all steps of a software developing process, i.e. from requirements analysis to the final construction of the system using an object oriented language.\nFurthermore the student shall be able to choose suitable storing methods for object persistence and especially able to use and develop databases for that purpose. This also includes selection and use of a DBMS system.','- Object oriented themes. Modelling concepts\n- Software requirements. Iterative development methods. Unified process\n- Requirements specification, functional/non-functional requirements\n- Use cases, use case model, use case relations: include, extends and inheritance. Business vs. system use cases\n- Classes and objects, class diagrams, class relations: inheritance, associations, dependencies\n- UML (Unified Modelling Language) standard\n- CRC (Class Responsibility Collaboration) cards\n- Dynamic model: interaction diagram, sequens diagrams, state diagrams\n- Problem statement, domain model, analysis model. Multi-tier architectures\n- Object design.  Methods for object persistence (JDBC).\n- Case tools. Automatic code generation. Forward , reverse and round trip engineering\n- Databases\n- ER- and EER models, normalization, keys, integrity, security, conceptual and logical database design\n- Mapping of classe diagrams to tables\n- Multidimensional databases. Datawarehousing\n- Advanced SQL (structured query language)\n- Interpretation of existing data bases (e.g. MySQL, Oracle, Access and Microsoft SQL).');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (64,'Data Security','02345',10,'To give students an introduction to basic concepts in computer security.','Security concepts: confidentiality, integrity, authenticity, availability etc. Symmetric and asymmetric cryptography and their uses; key distribution and digital signatures; discretionary and mandatory access control policies for confidentiality and integrity. Communication protocols for authentication, confidentiality and message integrity; network security; system security, intrusion detection and malicious code. Security models and security evaluation. Administration of security. Legal aspects of computer security.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (65,'Programming Techniques','02348',10,'The participants must understand a number of fundamental concepts and techniques for the construction and analysis of efficient algorithms and data structures. Furthermore they must understand different principles for programming languages. They must be able to construct simple virtual machines and compilers.','- Presentation of a series of fundamental algorithms and data structures for searching, sorting and more.\n- Recursion. Analysis of the efficiency of different algorithms. O notation.\n- Virtual machines and compilation. Principles for construction of compilers/virtual machines: lexical analysis, syntax analysis, semantic analysis, code generation. \n- The use of the learned principles by implementation of practical cases as a simple virtual machine and a compiler for that machine.\n- Different programming languages and their profiles. Imperative languages, functional languages, logical languages. ');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (66,'Windows Programming using C# and .Net','02350',5,'No description available.','No description available.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (67,'Net Technology B','02355',10,'The purpose of the course is to make the student able to develop client/server systems using primarily the java programming language.','- Client/server models\n- Architectures, layers\n- Network programming: URL class, socket class, socket programming\n- Principles for distributed object models\n- Servlets\n- JSP\n- MVC (Model View Control) Architecture\n- JDBC');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (68,'Array-based logic and systems','02357',5,'Array-based logic is a new IT niche more usually called array-based technology. The basis for the technology is a theory which ensures that logic systems are faultless. A feature which is  important for railways, electric power supply and in general infrastructure, where safety requirements are important. The theory has also found application to the configuration of products and imbedded control systems, for example audio-video products. The aim of the course is to give the participants a theoretical knowledge of array-based logic, which has been developed within the area of systems science.','The scientific foundation of array-based logic is a geometrical-algebraic formalization of logic. The array-based logic treats the logic as a physical discipline from an understanding of the assignment of logic truth values as physical measurements. In the course the following topics will be presented (1) the scientific foundation for the technology with special emphasis on the array-theoretical formulation of the logic, (2) the technological foundation, including compression of large scale of data, methods oriented constraint satisfaction and relational databases, (3) products for component software and user-friendly interface to the theory, (4) illustrative applications within railways, electric power supply, telecommunication, control systems and technical-economic production systems.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (69,'Introduction to Artificial Intelligence','02358',5,'To introduce to concepts, priciples and methods in artificial intelligence.','Heuristic search, game tree search, problem reduction techniques, knowledge representation in graphs and  rules.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (70,'Neural Networks and Soft Computing','02366',10,'The students should be able to build, optimize and use artificial neural networks, fuzzy systems and genetic algorithms in problem solving with classification, pattern recognition, interpolation, prediction and data-mining.','Biologocal neurons and networks.\nArtificial neural networks:\n- Neurons and transferfunctions, one- and multilayer networks\n- Feed forward / feed back networks\n- Learning algorithms\n- Choosing training data\n- Optimizing neural networks\n- Neural hardware\n- Selected topic in intelligent systems\nFuzzy Logic and Fuzzy Learning.\nGenetic Algorithms.\nConclusive project and report.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (73,'Introduction to Statistics','02402',5,'To give the participants an introduction to statistical thinking and methods and to provide them with an understanding of random variation and of the use of statistical models. Important statistical principles for collection and analysis of data are introduced, and methods for model choice, estimation, testing and model verification are presented. The participants learn to handle a number of elementary problems which occur frequently in engineering practice and are thus enabled to critically assess statistical (empirical) investigations and references. ','Simple methods for graphical and tabular assessments of collected or measured data: empirical distributions, histogram, normal probability plot, box plot. Model formulation. Model control: test for independence, control of distribution function. Application of especially Poisson-, binomial-, exponential- and normal distribution. Estimation and test of parameters and construction of confidence intervals in frequently occuring situations (e.g. means, variances, proportions). Regression analysis with one independent variable and introduction to the analysis of variance and to the analysis of contingency tables. Estimation theory. Distribution free testing\nand estimation. ');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (74,'Introduction to Statistics','02403',5,'See course 02402','See course 02402');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (75,'Probability theory','02405',5,'To provide the participants with an intuitive and rigorous understanding of probabilistic concepts. The course will familiarize the student with different sources of variability that occur in technical fields and science. This is partly done by exposure to a number of basic models of widespread application. Introduction of various standard techniques enables the students to perform calculations of probabilistic nature. The course provides the mathematical background for probabilistic methods used in statistics courses as well as courses within technical areas with a significant component of random phenomenona. Examples are models of reliability, formation of queues, traffic, analysis of signals, DNA-sequence modeling, etc.','The concept of probability,basic probability theory, combinatorics, conditional probability, independence, random variables, distribution functions, sample distributions: binomial, Poisson, exponential, normal, multidimensional random variables, functions of random variables, moments, mean value, variance, covariance, law of large numbers, central limit theorem, Markovs and Chebychevs inequalitites, order statistics, conditional distributions, conditional expectation, introduction to statistical inference, transformations: generating functions and the Laplace transformation.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (76,'Stochastic Processes','02407',5,'(Generally) To learn to formulate and analyse relatively simple dynamic probabilistic models. (Especially) To be acquainted with some models of this type which have proved practically usable.','The topics are: Markov chains in discrete and continous time, renewal and Markov renewal processes.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (77,'Multivariate Statistics','02409',5,'To give the participants a more thorough understanding of statistical methods with special emphasis on revealing the structure of multidimensional data. The participants are expected to learn to assess multidimensional (linear and non-linear) relations and estimate best predictors, to analyze the influence of complicated experimental designs, (uni- or multi- dimensional.) measurements, to assess whether multidimensional data can be reduced to lower dimensionality and in doing this, to assess whether a number of features in a population can be described with a few \"factors\", to discriminate between different populations using simple (linear) functions of measurements of different features of the single individuals, to separate a given set of data into relatively homogeneous classes, to assess the structure of and relations between phenomena which vary in time. Lastly to be able to use a standard statistical computer program (SAS) and be able to intrerpret the output and relate it to the course curriculum.','We will cover a large fraction of the following multidimensional models: Multidimensional distributions, multiple and partial correlation.  The general linear model: Estimation and testing, geometric interpretation.  Regression analysis: Estimation and testing, determination of best regression equations, analysis of residuals, prediction intervals, non-linear analysis etc. Multidimensional. analysis of variance: Hotellings discriminators, test for discriminators of a given structure.  Canonical analysis: Canonical correlation, principal components, factor analysis.  Cluster analysis: Hierarchical and non-hierarchical methods.  Correlation models: Models for random phenomena which vary in time and space.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (78,'Statistical Design and Analysis of Experiments','02411',5,'To acquaint the students with efficient statistical methods that may serve as basis for the planning of experiments and research activities. The methods aim at providing precise and reliable data and moreover to reduce the experimental work as much as possible. Methods for reduction of the influence from noise factors on experimental results are presented.','Main principles in experimental design: Randomisation and blocking. Balanced designs, square-designs, one or more blocking variables. Balanced incomplete block designs. Factorial designs, blocking in factorial designs, fractional factorial designs and confounding. Experimental optimization of processes under the presence of noise. Response surface methods. Multiple regression analysis.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (79,'Statistical Quality Control','02413',5,'To give the participants the necessary tools for the development of efficient statistical methods for the control of quality, in e.g. technical or environmental relations, and to give the participants a basic knowledge of standard methods for statistical control of production processes. It is of major concern that the participants learn to assess the efficiency of various methods under consideration in relation to the specific field of application.','Statistical procedures for acceptance sampling: Single, double and sequential sampling for discrete and continuous distributions. Application of international standards for acceptance sampling.  Statistical process control by control-chart methods: Shewhart control-charts (X-R charts etc.) CUSUM-charts.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (80,'Linear Statistical Analysis','02415',10,'To make it possible for you to understand and formulate some of the most common forms of statistical models: analysis of variance, regression analysis, the general linear model. Furthermore, models with correlation in time: auto-regressive and moving average models and combinations hereof.','The course is a co-ordination of the contents of courses: 02416 and 02417. For more detail on the course content please refer to these courses.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (81,'Likelihood and Lineaer Models','02416',5,'After this course you should be able to:\n1. Perform realistic (realistic means you can validate data, suggest suitable transformations, etc.) statistical analyses (analysis of variance, regression analysis and GLM). You are able to perform the analyses by means of statistical software and write a (consultant-)report.\n2. Understand some of the underlying theory of statistics: the likelihood principle, estimation, tests etc.\n3. Know some mordern principles: quasi-likelihood, profile-likelihood, estimation functions etc.','Visualisation and validation of data, transformations, analysis of variance, regression analysis, the general linear model, quasi- and profile-likelihood, estimation functions.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (82,'Time Series Analysis','02417',5,'To give a thorough introduction to time series analysis generally relevant to engineering science. A special attention is put on methods for model formulation and estimation. A main goal is to form the theoretical background for applications within forecasting, automatic and adaptive control, image analysis, econometrics and technometrics.','Linear stochastic processes. Conditional expectations with applications. Characterisation of stochastic processes. Second order analysis. Description in time and frequency domain. Correlation functions and their applications. Model formulation. Non-stationary processes. Time series with periodic variations and trends. Identification, estimation and verification of models for stochastic processes. Box-Jenkins method. Spectral analysis. Bivariate and multivariate time series analysis. Transfer functions with stochastic models. State space formulation, prediction and reconstruction. Kalman filter. Time series with missing observations. Methods for recursive estimation. Adaption methods. Introduction to non-linear stochastic processes. Theoretical results are combined with examples of practical applications.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (83,'Project work in Biostatistical Data Analysis and Chemometrics','02419',5,'At the end of the course:\n\n1) you have practical data analytical experience.\n2) you can write a consultancy report and communicate your resultss.\n3) you have experience with at least one statistical software.\n','The course is an applied statistics project course that can be taken on various levels and with various background knowledge. The projects can be one of the pre-suggested ones or it can be based on participants own data/problems if suitable. The key components of the course are:\n\n    * A few 1/2 day lectures on generic data analytic topics, at present planned to be:\n         1. Statistical software presentations\n         2. Nonlinear regression\n         3. Model validation and resampling\n         4. Statistical consultancy\n\n    * Time and possibility to work with online material of own interest, see list of topics below.\n\n    * A comprehensive project part working in small groups.\n\nList of topics for online self study:\n1)Multivariate analysis: Principal Component Analyse (PCA), Partial Least Squares Regression (PLS), Multivariate Analysis of Variance (MANOVA), Discriminant analysis (LDA,QDA), Cluster analysis.\n2)Mixed Linear Models/general ANOVA: Introduction to mixed models, factor structures and diagrams, Mixed model theory I and II, hierachical models, ANOVA model diagnostics, analysis of Split-plot designs, Analysis of Covariance, random coefficient models, repeated measures analysis I and II. \n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (84,'Stochastic Adaptive Control','02421',10,'To give the students a knowledge of methods for:  \n-Describing and controlling dynamic systems, which are influenced by stochastic disturbances.  \n-Identification of stochastic systems (i.e. estimation of unknown parameters) and, finally \n -Adaptive control of stochastic systems (i.e. simultaneous identification and control).','The course consists of three parts. In the first part the stochastic system is assumed to be known and the basic stochastic control theory is given. In order to considering control of an unknown system the second part of the course deals with modelling stochastic systems (i.e. system identification and parameter estimation). In the third and final part of the course the methods described in the previous parts are combined in adaptive control, i.e. control of unknown dynamic systems. The methods are mainly given for discrete time, state space - and transfer function models.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (85,'Advanced Dataanalysis and Statistical Modelling','02423',10,'To introduce  the participants to concepts and methods that are used for analysis of systematically recorded data, and to give competence to use these methods in practice.\nBy the end of the  course you should  be able to analyze variation in data, identify significant sources of variation and assess their effect, usually by means of a statistical model. \nYou should be able to fit non-linear models to data in relation to the problem under investigation and under due consideration to the characteristics of the data, to the uncertainty associated with individual datapoints and to possible hierarchical structures \ninduced by the data generation. \nMoreover, you should be able to interpret and use various model fitting methods, in particular the Bayes-pardigm for incorporation of prior knowledge.','Selected subjects from the following list,\nSurvey sampling, sample selection.\nModel fitting, likelihoodfunction and the Bayesian paradigm, statistical decision theory. Model validation, resampling methods. Distributions of response: binomial-, Poisson-,  multinomial-, exponential-, gammadistributions, and  inverse Gaussian distribution. Generalised linear models, hierarchical (mixed) generalised linear models, empirical Bayes methods, BLUP estimation. Models for lifetime- and survival data, censored observations, models with proportional hazards.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (86,'Advanced Dataanalysis and Statistical Modelling','02424',5,'To introduce the participants to modern concepts and methods that are used for analysis of data, and to give competences to use these methods in practice. \nBy the end of the course you should be able to analyze variation in data, identify significant sources of variation and assess their effect, usually by means of a statistical model. The introduced models and methods are modern, advanced methods. Some are from the classical part of the statistics, some are from the cutting edge between statistics, data mining and machine learning.','Selected subjects from the following list,\nGeneral linear models, generalized linear models, statistical decision theory, causal inference, graphs and conditional independence, log-linear models, nonparametric curve estimation, wavelets, classification and MCMC.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (87,'Advanced Time Series Analysis','02427',10,'To give an introduction to advanced time series analysis. The primary goal to give a thorough knowledge on modelling dynamic systems. Special attention is paid on non-linear and non-stationary systems, and the use of stochastic differential equations for modelling physical systems.','Non-linear time series models. Kernel estimators and time series analysis. Identification of non-linear models. State space models. Prediction in non-linear models. State filtering. Stochastic differential equations. Estimation of linear and (some) non-linear stochastic differential equations. Experimental design for dynamic identification. Methods for tracking parameters in non-stationary time series. Examples of both non-linear and non-stationary models. Non-linear models and chaos.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (88,'Analysis of correlated data: Mixed Linear Models','02429',5,'To obtain knowledge about and ability  to the handling of statistical analysis of data based on mixed linear models, with applications in agriculture, food science, biology, medicine and technical sciences.','The course will cover the basic general theory and applications of mixed linear models, ie, including fixed and random effects but also more general correlation structures are covered including the use of mixed linear models for the analysis of repeated measures/longitudinal data.\n\nIn short, if you have ANOVA-like data with a structure that goes beyond what you learn in basic statistics courses, you will learn how to deal with them in a practically oriented way!\n\nThe software packages R and/or SAS will be used.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (89,'Statististics and Design of Experiments ','02433',10,'The course consists of 2 parts, statistics and design of experiments, respectively.\n\nAim of the Statistics part:\nTo provide an introduction to statistical reasoning and methods.\nProvide and understanding of random variation and the use of statistical models. The most important statistical concepts will be covered, including collection of samples, standard statistical models, estimation, hypthesis testing and model validation. The participant will learn how to analyse simple problems that are typically encountered in practice. By following the course the student will be  to understand and interpret the results from statistical analysis.\n\nAim of the Desing of Experiments part: To acquint the students with efficient statistical methods that may serve as basis for the planning of experiments and research activities. The methods aim at providing precise and reliable data and moreover to reduce noise factors on experimental results are presented.','Contents Statistics part:\nSimple methods for graphical inspection of collected data. Formulation of statistical models and model control. The use of statistical distributions, and estimation and test related to these distributions. Regression and analysis of variance, and analysis of tables of counts.\n\nContents Design of Experimetns:\nMain principles in design of experiments. Randomisation and blocking. Balanced designs, square-designs, one or more blocking variables. Balanced incomplete block designs. Factorial designs, blocking in factorial designs, fraction factorial designs and confounding. General analysis of variance and variance components. Split plot and repeated measures design. Designs with covariates and multiple regression analysis\n\n\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (90,'Statistical Design and Analysis of Experiments','02434',5,'To acquaint the students with efficient statistical methods that may serve as basis for the planning of experiments and research activities. The methods aim at providing precise and reliable data and moreover to reduce the experimental work as much as possible. Methods for reduction of the influence from noise factors on experimental results are presented.','Main principles in statistical experimental design. Randomisation and blocking. Balanced designs, square-designs, one or more blocking variables. Balanced incomplete block designs. Factorial designs, blocking in factorial designs, fractional factorial designs and confounding. General analysis of variance and components of variance. Split plot and repeated meaures designs.Designs with covariate(s) Multiple regression analysis.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (91,'Applied Statistics and Statistical Software','02441',5,'To acquaint the participants with statistical work on a practical problem, typically involving many data. Descriptive methods are presented. The statistical analyses are carried out using modern statistical software R or S-plus.','A project assignment based on an actual problem from a research institute or a company will be part of the course. The statistical software S-plus will be used to analyse the data.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (92,'Stochastic Simulation','02443',5,'Numerical simulation is used for solving problems which are so complex that a theoretical model of the system cannot be solved by analytical methods. The goal is to enable the student to formulate a model of a real-life problem, implement and validate this model on a computer, and perform experiments with the computer model. Emphasis is put upon models involving stochastic elements, which are simulated by so-called Monte Carlo methods.','The first week deals with theory and exercises, followed by a case-study during the remaining two weeks.  Theory: The modelling process, methods of solution, random number generation, sampling from statistical distributions.  Discrete simulation: Time-true simulation, event-by-event principle, variance reduction. Case-studies: Operations research real-life problems, e.g. performance of data- and telecommunication systems, production planning, inventory control, optimal stochastic control etc.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (94,'Digital Signal Processing','02451',10,'To provide the participants knowledge of\n1) fundamental and widely applied digital signal processing methods,\n2) Matlab as a tool for development of signal processing algorithms,\n3) the application of digital signal processors for implementation of real time algorithms. \nThe course thus enable the participants to construct a digital signal processing system.','Signals and systems; signals with finite energy and finite power; signal sampling and reconstruction; frequency analysis of signals; the discrete Fourier transform and FFT; stochastic signals; correlation functions and power spectra; multirate signal processing; the Wiener filter; adaptive filters.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (95,'Applied Digital Signal Processing','02453',5,'To solve digital signal processing problems by using Matlab.','Based on the subjects covered in 02451 Digital Signal Processing, each group of two students selects a project. Examples of projects are: Spectral analysis, adaptive filtering, multirate and multidimensional filtering. Algorithms are designed, implemented and tested using a general computer. The algorithms can e.g. be tested on speech, music or medical signals. Each group of students prepares a report.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (96,'Non-Linear Signal Processing','02457',10,'To provide the student with a basis for developing algorithms and planning digital systems with emphasis on non-linear signal processing. The signals can be of many types, but the course will mainly deal with speech signals and biomedical signals.','The lectures will be chosen among the following topics: Neural Networks. An introduction to the theory of neural networks is given. The theory will be illustrated by applications in the areas of multimedia, bio-medicine, and datamining. Methods for recognition of speech, especially methods based on Hidden Markov Models and/or neural networks. Signal detection and pattern recognition. Bayesian decision theory and mathematical modelling of pattern recognition systems.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (97,'Machine Learning for  Signal Processing','02459',5,'To provide knowledge of and hands on experience with selected current research topics in the crossfield of machine learning and signal processing.\n','The course starts with lectures on current research subjects, e.g., prediction of time signals, neural networks, hidden Markov models, Bayesian modelling and signal detection, independent componernt analysis, segregation and analysis of audio signals. The participants carry out projects within the presented research subjects.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (98,'Digital image analysis, vision and computer graphics','02501',10,'To give a general introduction to image analysis, computer vision, and computer graphics, and to enable participation in advanced courses in these fields. The course is aimed at engineering students in general.','Digital images and data structures, display and color, anti-aliasing, projection and transformations, image aquisition using camera, geometric operations, Fourier transform, image filtering, distance transformations, connected component analysis, mathematical morphology, segmentation, classification, texture analysis, stereo and 3D-measurements, hidden surfaces, shading and shadows, texture mapping,  multispectral scanner geometry, remote sensing using radar, image coding and compression, and robot vision.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (99,'Advanced Image Analysis','02503',10,'To give a knowledge of advanced statistical methods and models for analysing image data, and give competence i applying these techniques in different applications. The course attempts at making the participants recognize that the use of appropriate statistical models can extract useful knowledge from image data - knowledge that is not directly accessible.','Markov random fields, conditional and simultaneous distributions, simulation and estimation, Bayesian image analysis, orthogonal transformations of multispectral images, texture modelling, geostatistical models, kriging, contextual classification methods.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (100,'Medical Image Analysis','02505',5,'To give the participants insight into methods for manipulation of images in biomedical engineering applications. After the course the participants will be able to implement and apply the mathematical models on computers. The participants will learn to solve an long list of image analytical problems in a radiological or medical research departments.','Mathematical greyscale morphology (bais operations, tophat, h-domes, watershed, morphological reconstruction); image registration (transformations: Euclidean similarity transformation, affine transformation, thin splate spline warps, B-spline based warps; similarity measures: point, curve, and surface based measures, voxel based measures - sum-of-square differences, joint entropi, mutual information). Registration og multiple images and construction of anatomical atlases. Deformable models and dynamic programming. Stereology and spatial sampling');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (101,'Image Analysis and Optimization','02507',5,'To give the students knowledge of some problems from image analysis, setting up mathematical (statistical) models, and the use of optimization algorithms to get robust estimates of the parameters in the models.','After an introduction on the first day, the students work in groups of 2-4 persons. Each group has its own problem (which the members help to choose and define). The problems are taken from current research at IMM, e.g. \n 1. Feature matching: Find corresponding \'features\' in two images and find the best match, taking into account the camera optics. Occurs e.g. in stereo vision. \n 2. Elektrophooresis Gel Matching (used to analyse proteins): Find an optimal distortion of the image of a gel to give a best match with another. This problem has similarities with 1. \n 3. Deformable models: Use prior assumptions and observations to find an optimal segmentation. Used to find the fat and lean parts in images of meat.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (102,'GPS, GIS and Setting out','02532',5,'To give a basic theoretical and practical knowledge of methods and instruments used in positioning, technical surveying and setting out (GPS, total stations, leveling instruments).\nTo become acquainted with Geographical Information Systems (GIS), digital maps, orthophotos and information data bases. \nTo qualify the student to evaluate methods and instruments required for a given accuracy in setting out of construction work or in a survey in connection with mapping or control work. \nEmphasis is on data control, evaluation of quality and visualization of the results.\n','Theory and exercises with GPS instruments for code and phase measurements using own and public base stations. \nMeasurements of angles, distances and heights with a total station. Measurements of heights with leveling instruments. Calibration of instruments.\nCoordinate systems, projections, datum and transformations are presented. \nError theory (random, systematic and gross errors) and an introduction to adjustment of redundant observations.\nBasic introduction to GIS. Construction of thematic maps for urban and environmental planning. Data from own measurements are transferred to a GIS system and combined with digital maps and information from databases. \n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (103,'GPS Global Positioning System','02534',5,'The participants will obtain a basic theoretical and practical knowledge of GPS, geodetic coordinate systems, and adjustment of observations.','The course presents theory and practice of GPS positioning. Different positioning methods are introduced, from GPS navigation of ships, cars and airplanes to geodetic GPS measurements with cm level accuracy. The following is introduced: Code measurements, DGPS, static and kinematic measurements in real time (RTK). Coordinate systems, map projections, and datums are presented. Also adjustment theory, and methods for evaluation of measurement errors and coordinate quality is introduced. The course involves practical exercises with surveying, processing and adjustment of GPS-data, and transformation of coordinates. The exercises involve static carrier phase positioning and RTK. ');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (106,'Geographic Information Systems','02545',5,'To introduce the basic concepts of Geographical Information Systems (GIS). To give an insight into spatial information and geodata.','The course deals with:\n- Introduction to GIS and MapInfo\n- Digital maps, including technical maps, topographical maps, cadastral maps\n- Coordinate systems, map projections and datums such as EUREF89, ED50, UTM and S34; geo-coding \n- Relational and spatial databases, spatial indexing, and queries with SQL\n- Exploratory data analysis, measures of spatial continuity (semivariograms), spatial interpolation (kriging)\n- Spatial analysis in vector and raster data models\n- The use of GIS in traffic planning, municipal and regional administration and planning.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (107,'Mapping from Aerial and Satellite Images','02547',5,'To provide knowledge of instruments and methods used for mapping and analysis of the surface of the earth. The course includes digital photogrammetry methods for topographic mapping and related techniques for analysis of digital image data for thematic mapping, earth observation and change detection.','Photogrammetric sensing systems: digital aerial cameras, multispectral scanners, laserscanning, imaging radar and high resolution satellite images. Image orientation and aerotriangulation. Photogrammetric measurements by image processing. Analysis of multi spectral and hyper spectral image data, including principal component analysis, spectral mixing, and classification. Stereoscopic compilation in photogrammetric work stations. Data collection for GIS, othophotos and 3D city models. Image analysis for interpretation and data analysis. Exercises in image orientation, mapping and data analysis (including own implementations in Matlab). Visit to/from a photogrammetric company.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (108,'Satellite positioning','02549',5,'To provide a good knowledge to the mathematical modelling principles used for conventional code based GNSS positioning (GPS, Galileo, or Glonass)','The basis for the course is to provide the knowledge necessary to develop the mathematical parts of the software used in a conventional code based GNSS receiver.\n\nThe excercises of the course are based on implementation of a number of routines and models often used in practise. The lectures support the excercises, and provide the necessary mathematical background. The following subjects will be delat with: computation of satellite positions, modelling of clock errors and atmospheric effects, positioning based on least squares adjustment of pseudoranges, computation of DOP-values, transformation of positions and covariances, diffentiel GPS. Futhermore examples on the use of Kalman filtering for GNSS positiong is discussed, carrier phase based positioning is introduced including the challenges related resolution of ambiguties.\n\nExcersises are carried out using Matlab');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (109,'Geoinformatics','02551',10,'To give advanced knowledge of the presentation, analysis and application of spatial information which offer qualifications for:  \n- working in public and private organisations which deal with geographical data,\n- working as technical co-ordinator between different professional groups with a need for analysis and visualization of geo-related data.','The course includes theories and methods for processing and combining different geographical data types.\nOn a more advanced level, the course deals with data capture by GPS, photogrammetry, laser scanning, multispectral scanning, and radar as well as with data processing in photogrammetric workstations, image analysis systems, geographical information systems and GPS software.\nSubjects like digital object recognition, change detection, kinematic GPS, terrestrial photogrammetry, geodesy, cartography, elevation models, urban modeling, data modeling in GIS, data quality and methods for raster analysis will be presented dependent on the interest of the course participants.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (110,'Computer Graphics','02561',10,'To give the participants an overview of graphics systems (as they for instance appear in connection with CAD, Virtual Reality, Computer Animation, 3D Multimedia, Scientific Visualization and Game Engines) and enable them to apply and develop graphics algorithms for visualisation and modelling. The visualization methods range from photorealistic rendering known from the film industry via Scientific Visualization to fast ad hoc methods that can be used in games and Virtual Reality Systems.  The modelling methods include the well-known methods from the CAD world and handling  organic shapes as trees, plants, clouds, smokes, fire etc. and editing of inhomogeneous materials including medical data.','Analysing and using Graphics systems as OpenGL. Extended camera models. Photorealistic rendering: Raytracing, Radiosity, the Photon map method, hybrid methods. Accelerated rendering: Shadow algorithms, reflection mapping, Environmental mapping and multi-texture mapping.\n3D-Graphics cards. Input devices and models. Functional based modelling: Trees, plants, skyes, smoke, fire, 2D and 3D textures.\nSolid modelling: Boudary models, Constructive Solid Geometry, Analytic Modelling (B-spline and Nurbs) and Voxel Modelling (Volume sculpting and Volume rendering).');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (111,'Virtual Reality Systems','02563',10,'Virtual Reality Systems can be used to build  models of the virtual world, to interact with that world and to get the feeling of being immersed in that world. The purpose of this course is to demonstrate how these systems are built, which hardware and software is used in the systems and to demonstrate how such system can be integrated in multimedia systems and graphics systems such as CAD-systems. Furthermore, it is the aim to give those participants who are familiar with ordinary graphics systems an overview of the extensions included in a Virtual Reality system and to give them the opportunity to develop\nalgorithms for software toolkits and apply these toolkits to develop VR oriented multimedia applications, and to evaluate these applications.','VR system architecture compared to traditional graphics systems. Extensions of existing graphical packages such as OpenGL Performer and formats as VRML/X3D. Hardware components: Graphics Cards, Head Mounted Displays, Caves, Booms, Trackers, Data gloves, and 3D mouses. Software components and algorithms: Rendering pipeline; Transformations in homogeneous coordinates and using quaternions; Projections: Parallel projection, perspective and stereo display; Model simplification, Level of  Details, Billboards; Model interaction, Collision detection; Culling; Latency. Sensor Systems, 3D Interaction techniques, Selection, Manipulations, Navigation, Position and orientation tracking.\nPhysiology and perception in Virtual Environments. Integration of VR systems in 3D multimedia systems. Examples of application areas: Scientific Visualization, Design, Architecture, Entertainment/Games, Urban Planning,\nMedical applications, High risk areas, Education and training.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (112,'Computer Animation and Modelling','02565',10,'Enable the participants to make 3D geometric models and Computer Animations, that can be used in Scientific Visualization, 3D multimedia production, modelling of Virtual Environments and in construction and design projects. Furthermore, the aim is to model complex geometric objects with CAD systems and propose geometric solutions to complicated technical problems.','Concepts for development of a Computer Animation. Geometric Analysis. Building geometric models in a combined patch-, polygon-, NURBS and density modelling system. Sculptured Surfaces. Deformation. Adding surface properties and 2D and 3D textures to the models. Warpning. Scene composing including light setting. Rendering techniques. Animations based on in-between techniques: camera animation, object deformations and animation. Function curves. Constraints. Dynamic simulation. Character animation using invers kinematics. Combining geometric objects and video/images so that virtuel object can be placed in a \"real\" world. Video editing and composing techniques such as used in the film industry.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (113,'Appearance Modelling','02566',10,'The appearance of the everyday world has long been a topic of interest to many people from painters to physicists. Even simple questions require careful thought. Why is the sky blue? Why does wet sand look darker than dry sand? How can you reproduce a human face using oil paints? More recently appearance models have become increasingly important in computer graphics and vision. In graphics, they are needed to model and simulate different materials. In vision, texture and reflection models can be used to guide the acquisition of computer models of different scenes and objects, as well as the recognition of these scenes and objects in images. \n\n','This class will go into the details of computer graphics algorithms for creating a given appearance. The course will cover the physics as well as the computational techniques for simulating light transport, light scattering, reflection models, subsurface scattering, participating media. In addition, we will be discussing the appearance of elements in the natural world in order to understand how to simulate this appearance. \n\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (114,'Introduction to the Graphics Art Industry','02567',5,'To provide basic knowledge of the graphics art industry.','Methods and processing of printed communication.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (115,'Light & Materials','02569',5,'The Purpose','content');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (116,'Computational Data Analysis','02581',10,'To provide the student with an overview of applied computer intensive data analysis concepts and applications, and to provide background for an informed choice of specialization in Informatics.','Methods: Bayes optimal decision, the generalization concept, multivariate Normal distribution, likelihood, linear/quadratic discriminants, CART, k-nearest neighbor classification, k-means unsupervised learning, the general linear model, generalized linear models,models for dynamical systems. Case studies: medical imaging, industrial vision, environmental modeling, biostatistics, pitch detection, pattern recognition in multimedia.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (117,'Computational Geometry Processing','02585',5,'Many engineering disciplines require methods for handling geometry via a computer. For instance, this is the case in the fields of computer graphics, physical simulation, medical science, image analysis, and signal analysis. The aim of this course is to teach methods for the handling and processing geometry. The teaching is on a level which enables the student to construct software for handling specific problems pertaining to the topics taught. It is furthermore the goal to give the student an understanding of the problems related to the discretization of continuous geometry as well as advantages and disadvantages of various methods for doing so.\n\nHaving followed this course, the student should be prepared to write a master s thesis within this area.\n','The following topics are discussed:\n- Several surface representations, for instance, meshes, distance fields (signed and unsigned), level sets, Non-uniform Rational B-Splines, and radial basis functions.\n- Differential geometry properties of surfaces and how such properties are computed in the case of discrete representations.\n- Subdivision surfaces.\n- Primitive operations on meshes.\n- Simplification and optimization of meshes.\n- Registration and merging of meshes.\n- Triangulation and manipulation of triangulations.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (118,'Statistics','02591',7.5,'The aim of the course is to give a basic knowledge of the most important methods within applied statistics.','Elementary theory of probability, statistical variables, mean, standard deviation and correlation coefficient. Important probability distribution as Binomial, Poisson and Normal distribution. Estimation, confidenceintervals and testing of hypotheses for one and two populations (one- and two-sided U-, t- and chi^2-tests). parametric and non-parametric methods of statistical analysis, including one-way analysis of variance, two-way analysis of variance, simple linear regression analysis, Wilcoxons,Kruskal-Wallis and Friedmanns rangtest)\nQuality Control');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (119,'Statistics','02593',7.5,'To give the participants a basic knowledge of a number of probability models which are important for engineers and which are usefull in probability calculations. Further important statistical priciples and methods for analyzing data and for estimation, testing and verification of probability models.\nFuthermore, an overall goal is:\n- to understand and relate to the applied method of research,\n- to make the students able to deal with results from newspapers and television, and\n- to make them able to read and use results from research and development.','Elementary theory of probability, statistical variables, mean, standard deviation and correlation coefficient. Important probability distributions as Binomial, Poisson and Normal distribution. Estimation, confidenceintervals and testing of hypotheses for one and two populations (one- and two-sided U-, t- and chi^2-tests). One-way and two-way analysis of variance, simple and multiple linear regression. Introduction to  non-parametric methods , experimental design,quality control and chemometry');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (120,'Numerical Algorithms','02601',5,'The course decribes how numerical computations are done most efficiently and accurate on a computer. The emphasis is on both the underlying mathematical methods and their practical implementation in Matlab. The goal is to make the student able to choose an appropriate algorithm for solving a given problem, taking into consideration the amount of computation as well as the influence of errors.','Floating-point representation on a computer; approximation and rounding errors. Algorithms for solving systems of linear equations, interpolation, numerical integration, nonlinear systems of equations, and ordinary differential equations. Matlab programming and implementation of selected algorithms in Matlab.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (121,'Modelling og computations','02603',10,'The student will be able to formulate simple models and to perform the awssociated calculations efficiently and accurately on a computer.  The studenty will be able to implement the underlying mathematical methods in Matlab.','- Basics:  Number representaion in a computer, approximation errors, rounding errors, programming in Matlab.\n- Modelling: description of physical processes by mathematical models.  Properties and limitations of models, use of models for data analysis.\n- Algorithms: interpolation, numerical integration, roots of functions, solution of linear systems of equations and of differential equations, optimization, data fitting.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (122,'Optimization and Data Fitting','02611',10,'To enable the student to use a computer to find optimal values of the parameters in a mathematical model of a physical or technical problem. The problem is e.g. to find the parameters in a function so that the corresponding curve is a best fit to a given set of data points.  The parameters may be subject to constraints.\nThe students will see how available library routines work and learn how to construct their own programs.','Approximation with polynomials and cubic splines.  Methods for finding minimum points of a smooth function (e.g., steepest descent and quasi-Newton methods). Special methods for least-squares approximation (e.g., Marquardt\'s algorithm) and minimax approximation.  Methods for constrained optimization.  Linear programming (Simplex and interior point methods).  Introduction to interval analysis with applications in global optimization.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (123,'High-Performance Computing','02613',10,'To enable the students to work with large-scale problems in mathematical modelling and their implementation on high-performance computers.','Introduction to high-performance computers  emphasizing those aspects that are important in connection with numerical computations on large data sets. Parallel computers: architecture and network.  Parallel programming using MPI and OpenMP.  Grid computing.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (124,'Projects in Algorithms','02621',5,'The course illustrates the implementation and use of algorithms. The projects come from practical technical problems, arising e.g. in the department\'s own activities.','Formulation of project and solution method. Implementation (e.g. in Matlab) and program testing. Evaluation of the computed results.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (125,'The Finite Element Method for Partial Differential Equations','02623',5,'To enable the student to develop computer programs for solving linear partial differential equations from engineering science by the finite element method.','Short treatment of the mathematical aspects of the finite element method including: local and global interpolation functions based on simple triangular elements, boundary value problems for partial differential equations, the assembly of the global algebraic system of equations, Gaussian elimination for banded systems, time-dependent problems. Systematic development, through exercises, of computer software for implementing the finite element method. The course concludes with an application of the program to a practical problem from engineering science.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (126,'Introductory Programming with Matlab','02631',5,'To teach the student to use the basic concepts and techniques for programming. The language used is Matlab.  The participants will become able to design, implement, test and document small programs, especially programs for solving mathematical models, and to visualize the results using the graphics functionality in Matlab ','Introduction to techniques used in imperative programming, including guidelines for designing, constructing, testing, debugging and documenting small programs. Introduction to tools like the Matlab editor, debugger, profiler, and the graphics in Matlab. Emphasis on examples and exercises of mathematical modeling type, including subjects from all over DTU.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (127,'Introductory Programming with Matlab','02633',5,'To teach the student to use the basic concepts and techniques for programming. The language used is Matlab.  The participants will become able to design, implement, test and document small programs, especially programs for solving mathematical models, and to visualize the results using the graphics functionality in Matlab.','Introduction to techniques used in imperative programming, including guidelines for designing, constructing, testing, debugging and documenting small programs. Introduction to tools like the Matlab editor, debugger, profiler, and the graphics in Matlab. Emphasis on examples and exercises of mathematical modeling type, including subjects from all over DTU.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (128,'Advanced Matlab Programming','02637',5,'The participants will learn techniques of scientific software design and development using advanced programming features of Matlab.','Advanced Matlab Programming features: Compact array notation and operations (vectorization), matrix functions, structures, global variables, debugging and profiling.\n\nToolboxes: What is a Matlab toolbox? Examples of toolboxes. Building a toolbox.\n\nGUIs: Graphical User Interfaces in Matlab. Handle graphics.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (129,'Modelling - Applied Mathematics','02661',5,'To introduce the students to mathematical modelling through:\n(a) formulation of a model of a physical/technical problem and solution of the equations using a computer,\n(b) evaluation of the models based on calculated solutions to the model equation.','At first there is given a very short introduction to programming by means of one or more languages/packages (e.g. C, MATLAB) as few lectures with exercises.\nThe participants are placed in groups. Each group selects one specific example which is subjected to a detailed analysis during the course under the teachers direction. Each group documents its work in a report.\nThe work mentioned above, with a specific example, can serve to illustrate some of the more basic elements of the modelling-process (but there is not given any formalised education on this subject):\n1. Formulation of the problem: What is the goal? The choice of model depends strongly on the purpose of the modelling. Which quantities from the real world are important for the model?\n2. Formulation of the model: How complicated model-equations can be solved with the resources available? Which mathematical skills are mastered? Which computer programs are available?\n3. Solution of model equations: Which method of solution is preferable: exact or approximate, analytical or numerical?\n4. Evaluation of the model: Do the predictions of the model coincide with available real life dataÃ¦ Are the limitations of the model acceptable?');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (130,'Numerical Analysis of Differential Equations','02685',10,'To give the students the ability to analyse both ordinary and partial differential equations resulting from problems in physics and engineering, and to give them an understanding of the basic numerical methods used to solve these problems via hands on experience.','The course begins with a short review of analytic solutions to differential equations via the calculus of variations, Fourier and Laplace transform, and the method of characteristics.  Thereafter, the emphasis is on numerical analysis and solution techniques.  \nOrdinary differential equations:  Numerical methods for solving initial-value problems; one-step and multi-step methods; the concepts of accuracy, convergence, order and stability; stiff sytems; simuation methods that run in real time; systems with shocks or phase-shifts; boundary-value problems and the shooting method.  \nPartial differential equations:  General classification; the method of lines; the finite-difference method, including analysis of stability and convergence, and it\'s application to several key problems; iterative methods for solving large systems of equations; introduction to the finite-volume, the finite-element, and the spectral method.  \nAlong with the theory, the course addresses many issues concerned with the practical design and implementation of efficient computational tools; with report topics which are taken from real-world applications.  Although the reports may be completed using any programming language, use of Matlab is recommended and some experience with the language will be an advantage.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (131,'Advanced Differential Equations','02689',5,'To provide advanced methods for the analytical and numerical solution of linear and non-linear partial differential equations in physics and\ntechnical sciences.','Non-linear stability, conjugate gradients, discontinuities, coupling\nbetween discrete and continuous systems, spectral methods, Fourier transforms, Riemann invariants in the method of characteristics, perturbation theory for non-linear partial differential equations, modulational instabilities in nonlinear systems, stochastic differential equations. Case studies: Navier-Stokes equations, quadratic non-linearities.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (132,'Data Processing','02691',5,'No description available.','No description available.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (133,'Introduction to Operations Research','02701',5,'Operations research (OR) is about applying mathematical models to help decision makers. The course aims to give a general orientation about OR methods, enabling students to be able to evaluate the possibility of using OR in a given problem setting, and to lay a firm foundation for further studies. Also, the course aims to enable students to use some OR methods on decision problems; optimization of linear models (Linear Programming) is emphasized. The course yields a useful background for working with mathematical models in most areas of engineering science.','Linear programming: model formulation, the Simplex method, theory, duality, sensitivity analysis, and other algorithms. The transportation problem: model formulation and solution. The assignment problem. Dynamic programming. Game theory. Queueing models: theory and applications. Inventory models: deterministic and stochastic.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (134,'Linear Programming','02709',5,'To enable students to solve large operations research problems using mathematical models and standard software. This entails formulating a mathematical optimization model, using the GAMS program on IMM\'s computer system to solve the model, evaluate alternatives, and\nfinally describe results and conclusions in a report. Since the various standard programs for mathematical modelling are rather similar, the knowledge gained is not restricted to the software employed here.','The theoretical background from Introduction to Operations Research is supplemented by introducing a standard program (GAMS) for formulating and solving mathematical models, i.e. both Linear Programming models, Integer Linear Programming models and Non-Linear Programming models. The first 7-9 days of the course are used to introduce the modelling language GAMS. GAMS is a small specialised programming language and hence prior programming knowledge is not necessary. The rest of the course is the used to model and solve a number of semi-realistic optimisation problems. Course evaluation is based on 1-2 reports made during the course.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (135,'Static and Dynamic Optimization','02711',5,'To give a well-founded knowledge, both theoretically and practically, of static and dynamic optimization models for data-based decision making, enabling students to formulate and solve operations research and technical-economic models.','Static optimization: Kuhn-Tucker theory, duality, gradient methods. Examples of economic and technical applications: production planning, process control, economic models. Dynamic optimization: Control theory, Pontriagin\'s maximum principle, dynamic programming, Bellman\'s optimality principle. Examples of economic and technical applications: pipe line problem, production planning, economic models.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (136,'Networks & Integer Programming','02713',10,'To give students a thorough introduction to formulating and solving network and integer programming problems arising in areas like traffic, transportation, investment, and production planning. Participants are enabled to formulate network and integer programming problems and to apply several simpler optimization methods on them.','Linear programming on graphs: review of relevant graph theory.  Algorithms for shortest paths, maximal flows in capacitated networks, and minimal cost flows. Planning networks: CPM/PERT. Integer programming: Branch & Bound, Cutting planes, Branch & Cut, Lagrange relaxation. Application examples: project planning, vehicle routing, and production planning.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (137,'Large-Scale Optimization','02715',10,'To give an introduction to the theory and solution methods for large scale optimisation probelms, using mathematical programming decomposition or metaheuristics. Examples from relevant problems such as planning of transportation, production, and manpower are given.','The course consists of two parts: A decomposition part and a metaheuristic part.\nIn the decomposition part, the mathematical theory behind the decomposition algorithms is reviewed and the algorithms described. These are: Benders Decomposition, Dantzig-Wolfe decomposition (Column Generation) and Lagrangean Decompostion.  Then two assignments are given, where the student should demonstrate knowledge of the techniques.\nIn the metaheuristic part, the first half of the course reviews the theory behind the most important metaheuristics: Simulated Annealing, TABU-search and Genetic Algorithms. In the second half of the course the students implement one or more metaheuristics in an efficient programming language (e.g. Java or C++) to solve one or more optimisation problems.\nEvaluation is performed based equally on reports from both parts of the course.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (138,'Large Scale Optimization using Decomposition','02717',5,'The aim of the course is to give a thorough introduction to decomposition algorithms','Many important optimization problems can be modeled using mixed\ninteger programming models. When these models cannot be solved using\nstandard solver software, decomposition algorithms can be applied, and\nthese are:\n\n- Benders decomposition\n- Dantzig-Wolfe decomposition/column generation\n- Lagrange decomposition\n\nThe course will give the students a thorough introduction to the three\ntypes of algorithms and enable to use them as solution methods for\nother problems.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (139,'Optimization using metaheuristics','02719',5,'To give a thorough introduction to the use of metaheuristics for optimization.','Many interesting optimization problems cannot be solved using standard\nmodels (LP/MIP) and standard solvers, because the problems are too\nlarge or contains complex objective functions and/or constraints.\n\nA pragmatic approach to optimization is to use tailored computer\nalgorithms to test a large number of solutions in order to find a good\nfeasible solution. This kind of algorithm is called a heuristic and\nit is an algorithm which does not guarantee to find the optimal\nsolution, but attempts to return a good solution. A number of more\ngeneral algorithm frameworks which can be applied to a wide variety of\nproblems, so called meta-heuristics have been suggested. In this\ncourse a number of these meta-heuristics will be presented:\n\n- Simulated Annealing\n- Genetic Algorithms/Evolutionary Algorithms\n- TABU search\n- GRASP\n- Ant Colony Optimization/Swarm Intelligence\n\nAs this field is constantly developing, the list of presented\nalgorithms may be changed.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (140,'Location and Distribution','02721',10,'To enable students to use operations research methods to formulate and solve decision problems regarding transportation of goods or persons and\nthe related physical framework. Location deals with the geographical placement of activities interacting with the surroundings through transportation. Distribution deals with many problems in relation to the design and operation of transportation systems. In actual practice the problem formulation often results in a model that is solvable only by a specifically adapted method; hence the course aims to enable students to design solution methods themselves by developing and combining the presented methods.','Locating a single facility using various distance measures. Location on a sphere. Locating a linear facility. Dynamic and stochastic location. Locating several facilities. Minimax location. Location-allocation models. The travelling salesman problem. Road networks and road data bases. Vehicle routing, including Dial-a-Ride and time windows. Routing and location. Arc routing. Manpower planning. Planning of scheduled transportation systems.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (142,'Optimization in Finance','02724',5,'To give the participants a thorough introduction to practical optimization in the Finance domain of risk and portfolio management. Participants will become able to identify problem areas which can be attacked using optimization methods, to evaluate risk-return trade-offs, and to model, solve and document large, practical problems. They will learn the latest developments within the field, both regarding financial instruments (derivatives, products with embedded options), and models and algorithms (such as scenarios and multistage, stochastic programming), and the practical integration of these topics.','Introduction to financial markets and instruments, modeling in GAMS, classification of risks and their modeling (utility theory, tracking, Value at Risk), classical concepts\n(duration, convexity) and models for fixed-income and stock portfolios (immunization, dedication, Markowitz), interest rate and stock price models, modeling derivatives, scenario-based modeling and stochastic programming. Case: Danish Mortgage Loans.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (143,'Systemic Operational Research','02729',5,'To enable the students to apply systemic (non-quantitative) operations research methods in cooperation with clients to solve some decision-making problems.','Hard, soft and critical operational research. Some methods: SODA, SSM, Strategic Choice, Scenario, etc. Multimethodology. Problem solving and facilitation. Sample topics for a case-study: Strategic development, planning, design, etc.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (144,'Modelling and Problem Solving','02731',5,'To enable students to build conceptual models and mathematical models as an aid to practical problem solving. Giving the students a broad and operational knowledge of the model concept is emphasized. The course maps out and discusses the mathematical model types used in other courses at IMM. To some degree it also maps out and discusses solution methods for various mathematical model types.','Introduction to mathematical modelling: problems, systems, and models. The problem solving process. Descriptive and optimization models; decision models; static and dynamic models; models in discrete and continuous time; models with discrete and continuous states.  Solution methods: analytic, numerical, and simulation. Illustrative examples.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (145,'Creativity and Problem Solving','02733',5,'To learn to use creative methods in cooperation with a user to solve some decision problems','Creative methods and techniques.\nCreative Problem Solving Processes.\nFacilitation and Group Work.\nOrganisation of Vision Conferences.\nApplications:Design, strategy, planning.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (146,'Advanced Topics in Operations Research','02735',5,'To allow the participants to work independently with advanced topics in operations research.','Variable. The topics of 2006 will be: Models and solution methods for Set Covering and Set Partitioning problems. Design, routing and protection of telecommunication networks. Operations research in the railway industry: Planning timetables, crew, and rolling stock.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (153,'Advanced analysis techniques','02913',5,'The students will obtain an understanding of one or more of the advanced techniques for program analysis - thereby complementing their previous knowledge of analysis techniques and giving them the background needed for judging which approach is adequate in a given setting.  ','The course consists of two parts; both will vary from year to year: The first part covers advanced approaches to program analysis; possibilities include abstract interpretation and type and effect systems. The second part covers recent research papers within an internationally hot research area.\n\nThe students are required to solve a number of exercises in the first part of the course and to present papers in the second part of the course.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (155,'Advanced Topics in Statistical Image Analysis, Computer Graphics and Geoinformatics','02915',5,'The aim of this course is to provide the participants with a knowledge of one or a few specific classes of methods or models in advanced statistical image analysis, computer graphics and geoinformatics.\n\nAfter the course the students should be able to implement methods and models covered and apply them to their own research projects.','The specific content may vary from year to year. Examples of topics are:\n\nFunctional data analysis, shape theory and analysis, markov random field models, computational geometry, statistical learning, pattern recognition, virtual reality, global illumination, geostatistics, geodetics, photogrammetry, positioning.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (156,'ITMAN Research School Seminars','02921',2.5,'The aim of this course is to give a broad introduction to a series of non-technical-scientific subjects which are vital for the Ph.D. studentâ€™s academic and private business career.\nThe invited guest speakers will introduce their specialist topics and expand on these according to the specific needs of the target audience, e.g. â€œhow to secure a software patentâ€, â€œhow to raise capital for private enterpriseâ€ and â€œdissemination of knowledge in research networksâ€.\nThe students will achieve a general how-to knowledge and insight into related, relevant fields which will enable them to improve their overall communication, research and business competences in relation to their Ph.D. studies.\nEach student will, according to own interests and goal, further develop (a) given topic(s) in relation to his/her Ph.D. project in an elaborate report.\n','Patents, software patents, communication, venture capital, knowledge sharing, project management, university management, research management, publication formalia and ethics, paper writing.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (157,'Iterative Methods for Linear Systems of Equations','02922',5,'The course gives an overview of modern iterative methods for solving large systems of linear equations. Such systems arise in a variety of applications, such as image processing, data mining, medical and geophysical tomograhy, geodesy and computational nano-science.\n\nThe purpose of this course is to present state-of-the-art methods for such systems, with emphasis on a combination of practical computational aspects and insight into the underlying theory for the methods.','Day 1 Introduction to iterative methods \nSimple iterative methods (Jacobi, Gauss Seidel, SOR), simple iterative methods for the normal  equations (ART, SIRT) and one-dimensional projection methods. \n\nDay 2 Projection methods (1) \nLanczos based methods for symmetric systems: CG and MINRES. Methods for the normal  equations. Convergence theory. \n\nDay 3 Projection Methods (2) \nArnoldi based methods: GMRES and FOM. Convergence theory. Restarted GMRES, GMRESR. \n\nDay 4 Projection Methods (3) \nBi-Lanczos based methods: BI-CG and QMR, Bi-CGSTAB and CGS. \n\nDay 5 Preconditioning Methods \nSimple iterative methods as preconditioners. ILU, polynomial preconditioning, EBE, etc. \n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (158,'Risk Management','02431',5,'The concept of Risk is an increasingly popular word in our society. Public regulatory approaches to activities with potential for adverse consequences are for instance being changed from Rule-based approaches to Risk-based approaches. Also, our society seems to be confronted with an increasing number of ill-understood Risks, be they global wariming, the introduction of new chemical substances or genetically modified organisms into the environment, the proliferation of emitters of electromagnetic radiation (mobile phones) etc.\nThe overall purpose of this course is to provide the students with skills and insights for them to relate in a qualified manner to existing and future debate of risk. The objectives are 1) to enable students to undertake a simple risk assessment, 2) to outline the components and principles of a risk management programme, and 3) provide students insights so they know some pitfalls and limitations for the application of 1) and 2). \nThe course introduces the student to risk-based decisions. Particularly situations where information is partial or uncertain, or events with a low chance of occurence but with unacceptably large consequence. Participants are provided with basic methods in risk analysis and assessment, and with some major dimensions of the risk management debate, to a large extent by the use of practical examples.','Introduction, technically objective risks, risk tradeoffs and cost benefit. What-If and Hazard and operability (HAZOP) methodology, barrier diagram analysis and assessment, risk matrix assessment, layers of protection analysis (LOPA), risk acceptance criteria, cases which  cannot be explained by standard rational theory, risk perception, examples of dynamic systems, risk homeostasis theory, accountability and blame.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (159,'Advanced Topics in Optimization','02617',5,'To allow the participants to work independently with advanced topics in optimization.','Variable. In 2006:  Surrogate models by Kriging and radial basis functions.  Space Mapping.  Special methods for Control and Regulation.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (160,'Security of Wireless Networks','02237',5,'To provide knowledge of recent advances in security of wireless networks.','Wireless channel basics. Traditional problems in wireless information warfare: jamming and target tracking. Essentials of security protocols in cellular, WLAN, Bluetooth, and satellite systems. Recent advances in security of Ad Hoc and sensor networks: key exchange, distribution and management; secure routing and localization. RFID privacy challenges and solutions.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (162,'Advanced Digital Signal Processing','02901',2.5,'To introduce the student to new trends in statistical signal processing and machine learning.','The course contains three days of introduction to new trends in signal processing (lectures and exercises), and is followed up by a mini-project and student presentations. We encourage that students apply the new methods to data relevant for their PhD-project. Topics: Bayesian methods, independent component analysis, sparse representations. Typical applications include: Bio-medical data, audio, multimedia, monitorin systems.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (163,'Advanced Topics in Statistical Image Analysis, Computer Graphics and Geoinformatics','02916',10,'The aim of this course is to provide the participants with a knowledge of one or a few specific classes of methods or models in advanced statistical image analysis, computer graphics and geoinformatics.\n\nAfter the course the students should be able to implement methods and models covered and apply them to their own research projects.','The specific content may vary from year to year. Examples of topics are:\n\nFunctional data analysis, shape theory and analysis, markov random field models, computational geometry, statistical learning, pattern recognition, virtual reality, global illumination, geostatistics, geodetics, photogrammetry, positioning.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (164,'Bio-medical Optics','10380',5,'The interest for applications of coherent light and optical sensing in biology and medicine has been increasing the past years. This is partly due to the development of new laser systems, parly the development in integrated optical sensors and advances in precise and non-invacive diagnostics and analasys of biological and medical processes. The course is devided into four arears: 1. New light sourses for medical diagnostics and treatment, 2. Optical technics for image formation in human tisue, 3. Optical biosensors, 4. Biomedical image processing','The lectures will cover the biological and medical background for application of light for treatment and diagnosis, especially propagation of light in humane tissue, interaction between light and tissue, possibilities for therapy with light and imaging methods and image analysis. Another important topic is the optical properties of the eye: Spectral properties, fluorescence of the various parts of the eye, optical diagnostics by scattered light within the eye, properties of the retina and possibilities for healing by optical treatment. Further, modern coherent light sources will be covered such as the optical properties of laser beams, different laser systems and their potential for bio-medical applications. Throughout the course practical examples and demonstrations will be used whenever possible.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (165,'Highway Pavements (project)','11452',5,'To give the students an opportunity to practise the skills obtained in course 13310 (67221) through a design project or laboratory tests.','Should be arranged with the teacher. Possible topics are the evaluation of: - the bearing capacity of road pavements using the falling weight deflectometer - the quality of old asphalt intended for recycling - slag from incinerator plants intended for reuse in road construction - the coefficient of friction, the roughness or the light reflection of road pavements.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (166,'Biological data analysis and chemometrics','27411',5,'After the course you will have experience in the common chemometric methods that are used in all biological and chemical disciplines, in which advanced spectrometric and analytical separation techniques are used. Chemometrics is used more and more in basic science and the industries.','Multivariate statistical treatment of quantitative and qualitative datamatrices. Exploratory dataanalysis, regression and classification methods. Scaling and standardization of raw data, cluster analysis and ordination (eigen value analysis). Principal component analysis, principal component regression, partial least square and ridge regression, principal coordinate analysis and correspondence analysis. Validation of data, especially cross-validation and jack-knifing. Use of plots in the evaluation of data. Special problems concerning chemical and biotechnogical data. \nThe course Workshop in biological data analysis and chemometrics in the June period is recommended if you want to work in depth with multivariate statistical methods on complicated biotechnological or chemical datasets.\n\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (167,'Introduction to Spacecraft Systems and Design','31330',10,'Participants get an understand satellite systems, physical properties of the space environment and the systems engineering elements of a spacecraft project. This course gives participants the basics for further studies within aerospace technology.','- Satellites why and how\n- Launch into orbit about Earth\n- Satellite systems and their functionality\n- Phasaes of a space project.\n- Ground segment and radio communication.\n- Spacecraft hardware and software architure.\n- Power\n- On-board computer and other hardware\n- Attitude and orbit control systems\n- Attitude determination\n- Space environment: radio activity, vacuum, thermal conditions\n- Mechanical structure and mechanisms: requirements, test and examples.\n');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (168,'Advanced topics in Biomedical Signal Processing','31565',10,'Enabeling the participants to follow and apply selected topics from the latest development of signal processing methods for medical applications. Insight into other applications are given. Additionally it is an objective to enable the student to follow the scientific signal processing litterature.  ','The first 5 weeks is related to a similar number of topics in the form of lectures and related exercises. The following topics are emphasized: Array signal processing, blind source separation, explorative signal processing e.g. neural networks and chaos theory, brain imaging and brain computer interface, and diagnostic methods in the form of pattern recognition focusing on neurophysiological, biometrical and imaging applications.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (169,'Space Technology Project - A','31903',10,'To provide participants with knowledge and give them experience in upper level design of high-technology systems, or subsystems, where hardware and software that together acomplish a complex task in a spacecraft.\n\nTo give participants ability to analyze functional requirements and make system designs that meet functional specifications. ','Projects can be mission or technology specific. In mission specific projects, several groups of students work in parallel towards a common mission, for example a DTUsat2 student satellite or an ESA student satellite.\nTechnology specific projects focus more on specific subsystem or method research and development. Projects can include advanced tests, application for an ESA parabolic flight is a possibility if zero-g environment is necessary.\n\nProject work in part A has particular emphasis on overall design and the detailed contents is agreed with the project superviser.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (170,'Space Technology Project - B','31904',10,'To provide participants with knowledge and give them experience in detailed design of high-technology systems, where hardware and software together acomplish a complex task in a spacecraft.\n\nTo give participants ability to implement a system with a specified functionality, test and integrate modules into a system and validate that specified requirements are met. ','Projects can be mission or technology specific. In mission specific projects, several groups of students work in parallel towards a common mission, for example a DTUsat2 student satellite or an ESA student satellite.\nTechnology specific projects focus more on specific subsystem or method research and development.\nProjects can include advanced tests, application for an ESA parabolic flight is a possibility if zero-g environment is necessary.\n\nProject work in part B has particular emphasis on detailed design and validation and the detailed contents is agreed with the project superviser.');
insert into `courses` (`id`,`name`,`code`,`points`,`objectives`,`contents`) values (171,'Digital Video Technology','34241',5,'The aim is to enable the participants to develop equipment  and applications in the area of digital TV and video. Development encompasses equipment for film, TV-production and distribution and Internet applications.','The course focusses on the techniques of digital video, TV and film production and distribution. The course covers the technical aspects of the process from production (recording, editing, ...) to distribution (network/telecommunication, disks, film). The course treats the principles of video coding and important standards and formats, eg MPEG1-4 (including conversions between these), motion estimation, enhancement of images, variable bandwidth, distribution and contribution of TV, and digital TV. The course introduces multiplexing and systems aspects of transmission in tv-net and communication networks in general, including the Internet.');

/*Data for the table `locations` */

insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (1,1,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (2,2,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (3,2,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (4,2,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (5,2,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (6,2,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (7,2,16);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (8,2,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (9,2,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (10,2,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (11,2,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (12,2,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (13,3,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (14,3,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (15,3,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (16,3,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (17,3,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (18,3,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (19,3,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (20,3,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (21,3,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (22,3,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (23,3,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (24,4,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (25,4,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (26,5,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (27,6,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (28,7,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (29,8,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (30,9,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (31,9,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (32,10,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (33,10,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (34,11,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (35,11,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (36,12,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (37,12,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (38,13,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (39,14,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (40,14,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (41,15,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (42,15,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (43,16,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (44,16,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (45,17,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (46,17,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (47,18,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (48,18,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (49,19,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (50,20,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (51,21,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (52,22,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (53,22,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (54,22,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (55,22,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (56,22,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (57,22,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (58,22,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (59,22,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (60,22,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (61,22,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (62,23,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (63,24,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (64,25,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (65,25,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (66,26,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (67,27,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (68,28,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (69,29,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (70,29,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (71,30,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (72,31,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (73,32,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (74,33,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (75,34,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (76,35,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (77,36,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (78,37,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (79,38,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (80,39,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (81,40,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (82,41,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (83,42,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (84,43,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (85,44,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (86,45,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (87,46,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (88,47,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (89,47,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (90,48,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (91,49,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (92,50,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (93,51,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (94,51,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (95,52,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (96,52,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (97,53,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (98,54,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (99,55,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (100,56,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (101,57,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (102,57,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (103,58,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (104,58,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (105,59,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (106,60,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (107,61,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (108,62,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (109,63,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (110,64,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (111,65,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (112,65,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (113,66,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (114,66,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (115,67,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (116,67,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (117,68,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (118,69,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (119,69,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (120,70,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (121,70,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (122,71,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (123,71,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (124,72,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (125,72,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (126,73,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (127,74,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (128,74,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (129,75,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (130,75,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (131,76,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (132,77,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (133,78,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (134,78,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (135,79,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (136,80,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (137,81,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (138,82,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (139,83,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (140,84,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (141,85,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (142,86,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (143,87,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (144,88,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (145,89,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (146,90,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (147,90,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (148,91,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (149,92,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (150,92,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (151,93,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (152,94,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (153,94,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (154,95,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (155,95,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (156,96,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (157,97,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (158,97,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (159,98,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (160,98,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (161,98,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (162,98,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (163,98,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (164,98,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (165,98,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (166,98,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (167,98,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (168,98,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (169,99,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (170,99,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (171,100,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (172,100,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (173,101,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (174,102,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (175,103,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (176,103,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (177,104,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (178,104,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (179,104,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (180,104,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (181,104,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (182,104,16);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (183,104,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (184,104,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (185,104,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (186,104,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (187,105,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (188,105,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (189,106,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (190,107,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (191,107,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (192,108,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (193,108,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (194,109,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (195,110,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (196,111,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (197,112,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (198,113,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (199,114,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (200,115,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (201,116,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (202,116,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (203,117,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (204,117,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (205,118,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (206,118,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (207,119,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (208,119,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (209,120,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (210,120,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (211,121,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (212,122,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (213,123,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (214,123,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (215,124,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (216,125,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (217,125,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (218,126,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (219,126,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (220,127,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (221,127,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (222,128,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (223,128,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (224,129,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (225,130,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (226,131,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (227,131,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (228,132,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (229,132,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (230,133,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (231,133,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (232,134,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (233,135,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (234,136,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (235,136,16);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (236,137,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (237,138,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (238,139,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (239,140,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (240,141,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (241,141,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (242,142,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (243,143,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (244,143,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (245,143,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (246,144,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (247,145,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (248,146,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (249,147,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (250,148,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (251,148,16);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (252,149,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (253,149,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (254,150,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (255,151,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (256,152,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (257,152,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (258,153,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (259,154,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (260,155,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (261,156,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (262,157,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (263,158,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (264,159,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (265,159,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (266,159,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (267,159,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (268,159,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (269,159,16);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (270,159,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (271,159,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (272,159,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (273,159,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (274,160,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (275,160,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (276,160,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (277,160,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (278,160,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (279,160,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (280,160,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (281,160,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (282,160,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (283,160,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (284,160,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (285,160,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (286,160,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (287,160,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (288,160,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (289,160,16);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (290,160,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (291,160,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (292,160,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (293,160,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (294,161,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (295,161,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (296,161,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (297,161,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (298,161,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (299,161,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (300,161,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (301,161,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (302,161,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (303,161,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (304,162,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (305,163,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (306,164,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (307,165,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (308,165,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (309,165,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (310,165,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (311,165,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (312,165,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (313,165,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (314,165,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (315,165,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (316,165,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (317,166,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (318,166,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (319,166,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (320,166,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (321,166,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (322,166,16);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (323,166,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (324,166,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (325,166,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (326,166,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (327,166,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (328,166,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (329,166,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (330,166,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (331,166,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (332,166,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (333,166,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (334,166,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (335,166,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (336,166,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (337,167,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (338,168,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (339,169,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (340,170,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (341,170,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (342,171,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (343,171,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (344,172,11);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (345,172,12);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (346,172,13);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (347,172,14);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (348,172,15);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (349,172,16);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (350,172,17);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (351,172,18);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (352,172,19);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (353,172,20);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (354,172,22);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (355,173,1);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (356,173,2);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (357,173,3);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (358,173,4);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (359,173,5);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (360,173,6);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (361,173,7);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (362,173,8);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (363,173,9);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (364,173,10);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (365,173,21);
insert into `locations` (`id`,`course_version_id`,`timetable_module_id`) values (366,174,17);

/*Data for the table `timetable_modules` */

insert into `timetable_modules` (`id`,`name`,`fall`) values (1,'E1A',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (2,'E1B',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (3,'E2A',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (4,'E2B',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (5,'E3A',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (6,'E3B',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (7,'E4A',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (8,'E4B',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (9,'E5A',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (10,'E5B',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (11,'F1A',0);
insert into `timetable_modules` (`id`,`name`,`fall`) values (12,'F1B',0);
insert into `timetable_modules` (`id`,`name`,`fall`) values (13,'F2A',0);
insert into `timetable_modules` (`id`,`name`,`fall`) values (14,'F2B',0);
insert into `timetable_modules` (`id`,`name`,`fall`) values (15,'F3A',0);
insert into `timetable_modules` (`id`,`name`,`fall`) values (16,'F3B',0);
insert into `timetable_modules` (`id`,`name`,`fall`) values (17,'F4A',0);
insert into `timetable_modules` (`id`,`name`,`fall`) values (18,'F4B',0);
insert into `timetable_modules` (`id`,`name`,`fall`) values (19,'F5A',0);
insert into `timetable_modules` (`id`,`name`,`fall`) values (20,'F5B',0);
insert into `timetable_modules` (`id`,`name`,`fall`) values (21,'E3W',1);
insert into `timetable_modules` (`id`,`name`,`fall`) values (22,'F3W',0);

SET SQL_MODE=@OLD_SQL_MODE;